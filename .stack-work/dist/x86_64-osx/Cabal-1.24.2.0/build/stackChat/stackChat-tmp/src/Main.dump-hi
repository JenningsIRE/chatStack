
==================== FINAL INTERFACE ====================
2017-11-02 00:55:12.502027 UTC

interface main@main:Main 8002
  interface hash: 9bdfdad9211ca7fb1d1c62868568fe82
  ABI hash: edcc186511ec6f1ce1d3b1e5f66935c9
  export-list hash: 8dd109c5ba5b158631c4a1f73598eb9a
  orphan hash: e3f907cc77bbc0eb7e4f425dad3f8e77
  flag hash: 4a911ef96c2b9d76f64eec71abf04ce6
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.broadcast
  Main.chat
  Main.checkAddRoom
  Main.disconnect
  Main.getUserLines
  Main.go
  Main.handleMessage
  Main.heloText
  Main.joinChatroom
  Main.killService
  Main.leaveChatroom
  Main.main
  Main.mainLoop
  Main.newClient
  Main.newServer
  Main.removeClient
  Main.runClient
  Main.sendToRoom
  Main.talk
  Main.Client{Main.Client clientHandle clientIP clientId clientPort clientRoomRefs clientSendChan}
  Main.ClientName
  Main.Message{Main.Broadcast Main.Command}
  Main.RoomName
  Main.RoomRef
  Main.Server{Main.Server clients rooms sock}
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1
                      async-2.1.1.1@async-2.1.1.1-8yywY4inVGRLJSCg60gBXj base-4.9.1.0
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      network-2.6.3.2@network-2.6.3.2-IsLM4TXcLoRI0fmmBYVyQz
                      stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         network-2.6.3.2@network-2.6.3.2-IsLM4TXcLoRI0fmmBYVyQz:Network.Socket
         stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Monad.STM
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
import  -/  async-2.1.1.1@async-2.1.1.1-8yywY4inVGRLJSCg60gBXj:Control.Concurrent.Async ea0392541014747b7209d5d4a7804b6a
import  -/  base-4.9.1.0:Control.Concurrent 2ee6a0a58489520b9a96d8fef10380fa
import  -/  base-4.9.1.0:Control.Exception a76dd9666251322fe34dbcca3a0817bf
import  -/  base-4.9.1.0:Control.Exception.Base 1e106916283856f4d9caeddab92cd861
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.Maybe d876c4ffe4b3c43755a781e8ad860d88
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Conc.Sync 8d0a228e5fc4d8c110495066f4d52ea1
import  -/  base-4.9.1.0:GHC.IO.Handle ba98a5b34d78cbf48b41fe58a3735c69
import  -/  base-4.9.1.0:GHC.IO.Handle.Text b65719f3b262b071ab1aabeb72fc9d8b
import  -/  base-4.9.1.0:GHC.IO.Handle.Types 17aa0e2ab137800e3a31992d780c071f
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.Environment 08cb808e8e6a7821e6f8cfa76a977431
import  -/  base-4.9.1.0:System.IO c9de64c5f5407c4cf1c52500c4d15200
import  -/  base-4.9.1.0:Text.Printf 6701574960cd2af960fec5d940be0c25
import  -/  base-4.9.1.0:Text.Read 75c59863e882ebaec4532e9465e2ee9b
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 0fd5c8559af8bc4b6f38b9cf9ba5a467
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base 8b155a212edaca6c85bcefe65a8bc505
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  network-2.6.3.2@network-2.6.3.2-IsLM4TXcLoRI0fmmBYVyQz:Network e1c2bc629a33bc735be38b505b5877ff
import  -/  network-2.6.3.2@network-2.6.3.2-IsLM4TXcLoRI0fmmBYVyQz:Network.Socket.Internal 9f052186d90733a29fe9bf6bf8921c1c
import  -/  network-2.6.3.2@network-2.6.3.2-IsLM4TXcLoRI0fmmBYVyQz:Network.Socket.Types 2eb8a83dc42cc86a12e652ce3294cbda
import  -/  stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Concurrent.STM 3662559905a40ae5adbc3e935ac706c8
import  -/  stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Concurrent.STM.TChan 791cd378857d88a7ed4d753121139423
import  -/  stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Concurrent.STM.TVar 8271fdeaf6f41f205dbe31243cf91390
a846f91ed410bfd476ab850310e22e30
  $s$fPrintfArg[]_$s$fPrintfArg[]_$cparseFormat ::
    [GHC.Types.Char] -> Text.Printf.ModifierParser
  {- Arity: 2, Strictness: <L,A><S,1*U>m,
     Unfolding: InlineRule (2, True, False)
                (\ (ds1 :: [GHC.Types.Char]) (ds2 :: [GHC.Types.Char]) ->
                 case ds2 of wild {
                   [] -> Text.Printf.errorShortFormat @ Text.Printf.FormatParse
                   : c1 cs
                   -> Text.Printf.FormatParse
                        (GHC.Types.[] @ GHC.Types.Char)
                        c1
                        cs }) -}
3a1c4a85518f5a6cb3bfaf3ba933e77b
  $sdelete_$sgo10 ::
    GHC.Types.Int
    -> Data.Map.Base.Map GHC.Types.Int a1
    -> Data.Map.Base.Map GHC.Types.Int a1
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a1
                   (w :: GHC.Types.Int)
                   (w1 :: Data.Map.Base.Map GHC.Types.Int a1) ->
                 case w of ww { GHC.Types.I# ww1 -> Main.$w$sgo10 @ a1 ww1 w1 }) -}
0ffe4674c1ea271134c1fbc6a462bf6b
  $sinsert_$sgo10 ::
    GHC.Types.Int
    -> a1
    -> Data.Map.Base.Map GHC.Types.Int a1
    -> Data.Map.Base.Map GHC.Types.Int a1
  {- Arity: 3, Strictness: <S,1*U(U)><L,U><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a1
                   (w :: GHC.Types.Int)
                   (w1 :: a1)
                   (w2 :: Data.Map.Base.Map GHC.Types.Int a1) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$w$sgo1 @ a1 ww1 w1 w2 }) -}
c4753614eb4bb6049a700384e568c5c0
  $sprintf3 :: () GHC.Types.~~ ()
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Eq# @ * @ * @ () @ () @~ <()>_N) -}
6210aa73a4bb794a27ad3ad0105b5910
  $tc'Broadcast :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3142049783279842247##
                   10598622670723664079##
                   Main.$trModule
                   Main.$tc'Broadcast1) -}
99f3455298ef37c6bc51a517745ed47c
  $tc'Broadcast1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Broadcast"#) -}
e62d791731323355b04c005ddd44e49e
  $tc'Client :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14317905627767584460##
                   8020356174247805466##
                   Main.$trModule
                   Main.$tc'Client1) -}
1e31cdcbef3d5a45efde6decabdcaefc
  $tc'Client1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Client"#) -}
71a1d0da8ac90eb52db4e0337dee0105
  $tc'Command :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14407055736893994245##
                   9773285697625515779##
                   Main.$trModule
                   Main.$tc'Command1) -}
df8b35970719712831612cdf74ffb012
  $tc'Command1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Command"#) -}
e2e47e4b095050486d76025efbb9eb8d
  $tc'Server :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17147978485207381799##
                   15204794003762209136##
                   Main.$trModule
                   Main.$tc'Server1) -}
0a4a60082ab2028484dd711c5f968b45
  $tc'Server1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Server"#) -}
824c8b6e5d1e111a64ffa02e17dfa0f0
  $tcClient :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2041806266336690928##
                   6211083142683335045##
                   Main.$trModule
                   Main.$tcClient1) -}
f6308ac30128598c150371405caec582
  $tcClient1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Client"#) -}
a317a2b68abab7bca30880bdf39d36dc
  $tcMessage :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11750200497582023075##
                   1107912994446066806##
                   Main.$trModule
                   Main.$tcMessage1) -}
9d158e0a5fe47b777c8610b9e6ae8f21
  $tcMessage1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Message"#) -}
6aba3734e0be30f8602a90a2af677de2
  $tcServer :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7505357571270362355##
                   10136080178563477716##
                   Main.$trModule
                   Main.$tcServer1) -}
9dec17e7d0d7ed6f4ff7f48675023568
  $tcServer1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Server"#) -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
9a052e776d9ba13d6eb6d3875b088761
  $w$sgo1 ::
    GHC.Prim.Int#
    -> a1
    -> Data.Map.Base.Map GHC.Types.Int a1
    -> Data.Map.Base.Map GHC.Types.Int a1
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [0] -}
30b69a2add2fa838a419cc059f94c040
  $w$sgo10 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map GHC.Types.Int a1
    -> Data.Map.Base.Map GHC.Types.Int a1
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
35de5288a2860252b5d37807e72bce88
  $wbroadcast ::
    GHC.Prim.TVar#
      GHC.Prim.RealWorld (Data.Map.Base.Map GHC.Types.Int Main.Client)
    -> GHC.Types.Int
    -> Main.Message
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, HasNoCafRefs, Strictness: <S,U><L,U(U)><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.TVar#
                            GHC.Prim.RealWorld (Data.Map.Base.Map GHC.Types.Int Main.Client))
                   (w :: GHC.Types.Int)
                   (w1 :: Main.Message)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.readTVar#
                        @ GHC.Prim.RealWorld
                        @ (Data.Map.Base.Map GHC.Types.Int Main.Client)
                        ww
                        w2 of ds1 { (#,#) ipv ipv1 ->
                 letrec {
                   go10 :: GHC.Conc.Sync.STM ()
                           -> Data.Map.Base.Map GHC.Types.Int Main.Client
                           -> GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     {- Arity: 3, Strictness: <C(S),1*C1(U(U,U))><S,1*U><S,U> -}
                   = \ (z' :: GHC.Conc.Sync.STM ())
                       (ds :: Data.Map.Base.Map GHC.Types.Int Main.Client)
                       (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case ds of wild {
                       Data.Map.Base.Bin dt kx x l r
                       -> go10
                            (\ (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                             case x of wild1 { Main.Client ds2 ds3 ds4 ds5 ds6 ds7 ->
                             case ds7 of wild2 { GHC.Conc.Sync.TVar tvar# ->
                             case GHC.Prim.readTVar#
                                    @ GHC.Prim.RealWorld
                                    @ (Data.Map.Base.Map GHC.Types.Int GHC.Types.Int)
                                    tvar#
                                    eta1 of ds8 { (#,#) ipv2 ipv3 ->
                             case w of ww1 { GHC.Types.I# ww2 ->
                             case Main.$wpoly_go10 @ GHC.Types.Int ww2 ipv3 of wild3 {
                               GHC.Types.False -> go10 z' r ipv2
                               GHC.Types.True
                               -> case ds6 of wild4 { Control.Concurrent.STM.TChan.TChan dt1 dt2 ->
                                  case GHC.Prim.readTVar#
                                         @ GHC.Prim.RealWorld
                                         @ (Control.Concurrent.STM.TChan.TVarList Main.Message)
                                         dt2
                                         ipv2 of ds9 { (#,#) ipv4 ipv5 ->
                                  case GHC.Prim.newTVar#
                                         @ (Control.Concurrent.STM.TChan.TList Main.Message)
                                         @ GHC.Prim.RealWorld
                                         (Control.Concurrent.STM.TChan.TNil @ Main.Message)
                                         ipv4 of ds10 { (#,#) ipv6 ipv7 ->
                                  case ipv5 of wild5 { GHC.Conc.Sync.TVar tvar#1 ->
                                  case GHC.Prim.writeTVar#
                                         @ GHC.Prim.RealWorld
                                         @ (Control.Concurrent.STM.TChan.TList Main.Message)
                                         tvar#1
                                         (Control.Concurrent.STM.TChan.TCons @ Main.Message w1 ipv7)
                                         ipv6 of s2# { DEFAULT ->
                                  case GHC.Prim.writeTVar#
                                         @ GHC.Prim.RealWorld
                                         @ (Control.Concurrent.STM.TChan.TVarList Main.Message)
                                         dt2
                                         (GHC.Conc.Sync.TVar
                                            @ (Control.Concurrent.STM.TChan.TList Main.Message)
                                            ipv7)
                                         s2# of s2#1 { DEFAULT ->
                                  go10 z' r s2#1 } } } } } } } } } } })
                              `cast`
                            (Sym (GHC.Conc.Sync.N:STM[0] <()>_R))
                            l
                            eta
                       Data.Map.Base.Tip
                       -> z' `cast` (GHC.Conc.Sync.N:STM[0] <()>_R) eta }
                 } in
                 go10
                   Main.broadcast2 `cast` (Sym (GHC.Conc.Sync.N:STM[0] <()>_R))
                   ipv1
                   ipv }) -}
17c46fa34ce938fc41413c31c783c65b
  $wchat ::
    Main.Server
    -> GHC.IO.Handle.Types.Handle
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 4, Strictness: <L,1*U(A,1*U(U),A)><L,U><S,U><S,U>,
     Inline: [0] -}
e182b1ed14a9f5c91cd3f34247bfcfaa
  $wcheckAddRoom ::
    GHC.Prim.TVar#
      GHC.Prim.RealWorld (Data.Map.Base.Map GHC.Types.Int Main.Client)
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.IO.Handle.Types.Handle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.Client #)
  {- Arity: 6, Strictness: <S,U><L,U(U)><L,U><L,U><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.TVar#
                            GHC.Prim.RealWorld (Data.Map.Base.Map GHC.Types.Int Main.Client))
                   (w :: GHC.Types.Int)
                   (w1 :: GHC.Base.String)
                   (w2 :: GHC.Types.Int)
                   (w3 :: GHC.IO.Handle.Types.Handle)
                   (w4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 GHC.Prim.atomically#
                   @ Main.Client
                   (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case GHC.Prim.readTVar#
                           @ GHC.Prim.RealWorld
                           @ (Data.Map.Base.Map GHC.Types.Int Main.Client)
                           ww
                           s of ds1 { (#,#) ipv ipv1 ->
                    case GHC.Prim.newTVar#
                           @ (Control.Concurrent.STM.TChan.TList Main.Message)
                           @ GHC.Prim.RealWorld
                           (Control.Concurrent.STM.TChan.TNil @ Main.Message)
                           ipv of ds { (#,#) ipv2 ipv3 ->
                    let {
                      hole :: GHC.Conc.Sync.TVar
                                (Control.Concurrent.STM.TChan.TList Main.Message)
                        {- Strictness: m -}
                      = GHC.Conc.Sync.TVar
                          @ (Control.Concurrent.STM.TChan.TList Main.Message)
                          ipv3
                    } in
                    case GHC.Prim.newTVar#
                           @ (GHC.Conc.Sync.TVar
                                (Control.Concurrent.STM.TChan.TList Main.Message))
                           @ GHC.Prim.RealWorld
                           hole
                           ipv2 of ds2 { (#,#) ipv4 ipv5 ->
                    case GHC.Prim.newTVar#
                           @ (GHC.Conc.Sync.TVar
                                (Control.Concurrent.STM.TChan.TList Main.Message))
                           @ GHC.Prim.RealWorld
                           hole
                           ipv4 of ds3 { (#,#) ipv6 ipv7 ->
                    case GHC.Prim.newTVar#
                           @ (Data.Map.Base.Map GHC.Types.Int GHC.Types.Int)
                           @ GHC.Prim.RealWorld
                           (Data.Map.Base.Tip @ GHC.Types.Int @ GHC.Types.Int)
                           ipv6 of ds4 { (#,#) ipv8 ipv9 ->
                    let {
                      ipv10 :: Control.Concurrent.STM.TChan.TChan Main.Message
                        {- Strictness: m -}
                      = Control.Concurrent.STM.TChan.TChan @ Main.Message ipv5 ipv7
                    } in
                    let {
                      ipv11 :: GHC.Conc.Sync.TVar
                                 (Data.Map.Base.Map GHC.Types.Int GHC.Types.Int)
                        {- Strictness: m -}
                      = GHC.Conc.Sync.TVar
                          @ (Data.Map.Base.Map GHC.Types.Int GHC.Types.Int)
                          ipv9
                    } in
                    let {
                      client :: Main.Client {- Strictness: m -}
                      = Main.Client w w1 w2 w3 ipv10 ipv11
                    } in
                    case GHC.Prim.writeTVar#
                           @ GHC.Prim.RealWorld
                           @ (Data.Map.Base.Map GHC.Types.Int Main.Client)
                           ww
                           (case w of ww1 { GHC.Types.I# ww2 ->
                            Main.$w$sgo1 @ Main.Client ww2 client ipv1 })
                           ipv8 of s2# { DEFAULT ->
                    (# s2#, client #) } } } } } })
                   w4) -}
d90088825c2c084c3aa151d101557564
  $wdisconnect ::
    GHC.IO.Handle.Types.Handle
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 3, Strictness: <L,U><S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.IO.Handle.Types.Handle)
                   (w :: GHC.Base.String)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.List.$wlenAcc
                        @ [GHC.Types.Char]
                        (Data.OldList.lines w)
                        0# of ww2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww2 3#) of wild {
                   GHC.Types.False
                   -> case GHC.IO.Handle.Text.hPutStr2
                             ww
                             (GHC.CString.unpackAppendCString# "Unrecognised command: "# w)
                             GHC.Types.True
                             w1 of ds1 { (#,#) ipv ipv1 ->
                      (# ipv, GHC.Types.True #) }
                   GHC.Types.True -> (# w1, GHC.Types.False #) } }) -}
f0774f0d5d699901e8a300053ff16c19
  $whandleMessage ::
    Main.Server
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.IO.Handle.Types.Handle
    -> GHC.Conc.Sync.TVar
         (Data.Map.Base.Map GHC.Types.Int GHC.Types.Int)
    -> Main.Message
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 8,
     Strictness: <L,1*U(1*U(U(U),A,A,A,1*U(U)),1*U(U),A)><L,1*U(U)><L,1*U><L,1*U(U)><L,U><L,U(U)><S,1*U><S,U>,
     Inline: [0] -}
1ed3fe3764e1600dee5f3f13fbd5c7b3
  $wheloText ::
    Main.Server
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.IO.Handle.Types.Handle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 5, Strictness: <S,1*H><L,1*U><L,1*U(U)><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ (w :: Main.Server)
                   (ww :: GHC.Base.String)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: GHC.IO.Handle.Types.Handle)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        ww2
                        (GHC.CString.unpackAppendCString#
                           "HELO text\n\
                           \IP:"#
                           (GHC.Base.++
                              @ GHC.Types.Char
                              ww
                              (GHC.CString.unpackAppendCString#
                                 "\n\
                                 \Port:"#
                                 (case ww1 of ww3 { GHC.Types.I# ww4 ->
                                  case GHC.Show.$wshowSignedInt
                                         0#
                                         ww4
                                         (GHC.Types.[] @ GHC.Types.Char) of ww5 { (#,#) ww6 ww7 ->
                                  GHC.Base.++
                                    @ GHC.Types.Char
                                    (GHC.Types.: @ GHC.Types.Char ww6 ww7)
                                    Main.heloText2 } }))))
                        GHC.Types.True
                        w1 of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Types.True #) }) -}
c53b79e293a748c9e27bfa09fa15d71f
  $wjoinChatroom ::
    Main.Server
    -> GHC.Types.Int
    -> GHC.IO.Handle.Types.Handle
    -> GHC.Conc.Sync.TVar
         (Data.Map.Base.Map GHC.Types.Int GHC.Types.Int)
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 6,
     Strictness: <L,1*U(A,1*U(U),A)><L,1*U(U)><L,U><L,U(U)><S,U><S,U>,
     Inline: [0] -}
e8e58960bad8630616100d0d34f79486
  $wleaveChatroom ::
    Main.Server
    -> GHC.Types.Int
    -> GHC.IO.Handle.Types.Handle
    -> GHC.Conc.Sync.TVar
         (Data.Map.Base.Map GHC.Types.Int GHC.Types.Int)
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 6,
     Strictness: <L,1*U(A,1*U(U),A)><L,1*U(U)><L,U><L,U(U)><S,U><S,U>,
     Inline: [0] -}
e12382e0c0db3041d261eea51d111b5e
  $wmainLoop ::
    Main.Server
    -> Foreign.C.Types.CInt
    -> Network.Socket.Types.Family
    -> Network.Socket.Types.SocketType
    -> Network.Socket.Types.ProtocolNumber
    -> GHC.Prim.MVar#
         GHC.Prim.RealWorld Network.Socket.Types.SocketStatus
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 9,
     Strictness: <L,U(U(U(U),A,A,A,U(U)),U(U),A)><L,U(U)><S,U><L,U><L,U(U)><S,U><L,U><L,U(U)><S,U>,
     Inline: [0] -}
00ddc9de9bf45388bb352ac1faec860e
  $wpoly_go10 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map k GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0] -}
0b5e0469206d7e7741f103f000a3e9dc
  $wrunClient ::
    Network.Socket.Types.Socket
    -> GHC.Conc.Sync.TVar (Data.Map.Base.Map GHC.Types.Int Main.Client)
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.IO.Handle.Types.Handle
    -> Control.Concurrent.STM.TChan.TChan Main.Message
    -> GHC.Conc.Sync.TVar
         (Data.Map.Base.Map GHC.Types.Int GHC.Types.Int)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 9,
     Strictness: <L,U(U(U),A,A,A,U(U))><L,U(U)><L,U(U)><L,U><L,U(U)><L,U><L,U(U,U)><L,U(U)><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: Network.Socket.Types.Socket)
                   (ww1 :: GHC.Conc.Sync.TVar
                             (Data.Map.Base.Map GHC.Types.Int Main.Client))
                   (ww2 :: GHC.Types.Int)
                   (ww3 :: GHC.Base.String)
                   (ww4 :: GHC.Types.Int)
                   (ww5 :: GHC.IO.Handle.Types.Handle)
                   (ww6 :: Control.Concurrent.STM.TChan.TChan Main.Message)
                   (ww7 :: GHC.Conc.Sync.TVar
                             (Data.Map.Base.Map GHC.Types.Int GHC.Types.Int))
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Control.Concurrent.Async.$fAlternativeConcurrently7
                        @ ()
                        @ GHC.Prim.Any
                        @ (Data.Either.Either () GHC.Prim.Any)
                        (letrec {
                           server :: GHC.Prim.State# GHC.Prim.RealWorld
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                             {- Arity: 1, Strictness: <S,U> -}
                           = \ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                             case GHC.Prim.atomically#
                                    @ (GHC.Types.IO ())
                                    (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                     case ww6 of ww8 { Control.Concurrent.STM.TChan.TChan ww9 ww10 ->
                                     case GHC.Prim.readTVar#
                                            @ GHC.Prim.RealWorld
                                            @ (Control.Concurrent.STM.TChan.TVarList Main.Message)
                                            ww9
                                            s1 of ds1 { (#,#) ipv ipv1 ->
                                     case ipv1 of wild { GHC.Conc.Sync.TVar tvar# ->
                                     case GHC.Prim.readTVar#
                                            @ GHC.Prim.RealWorld
                                            @ (Control.Concurrent.STM.TChan.TList Main.Message)
                                            tvar#
                                            ipv of ds2 { (#,#) ipv2 ipv3 ->
                                     case ipv3 of wild1 {
                                       Control.Concurrent.STM.TChan.TNil
                                       -> case GHC.Prim.retry# @ Main.Message ipv2
                                          ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                    GHC.Types.IO () #)
                                          of {}
                                       Control.Concurrent.STM.TChan.TCons a1 dt
                                       -> case GHC.Prim.writeTVar#
                                                 @ GHC.Prim.RealWorld
                                                 @ (Control.Concurrent.STM.TChan.TVarList
                                                      Main.Message)
                                                 ww9
                                                 (GHC.Conc.Sync.TVar
                                                    @ (Control.Concurrent.STM.TChan.TList
                                                         Main.Message)
                                                    dt)
                                                 ipv2 of s2# { DEFAULT ->
                                          (# s2#,
                                             (\ (s2 :: GHC.Prim.State#
                                                         GHC.Prim.RealWorld)[OneShot] ->
                                              case Main.$whandleMessage
                                                     (Main.Server ww ww1 Main.runClient2)
                                                     ww2
                                                     ww3
                                                     ww4
                                                     ww5
                                                     ww7
                                                     a1
                                                     s2 of ds4 { (#,#) ipv4 ipv5 ->
                                              case ipv5 of wild2 {
                                                GHC.Types.False -> (# ipv4, GHC.Tuple.() #)
                                                GHC.Types.True -> server ipv4 } })
                                               `cast`
                                             (Sym (GHC.Types.N:IO[0] <()>_R)) #) } } } } } })
                                    s of ds1 { (#,#) ipv ipv1 ->
                             ipv1 `cast` (GHC.Types.N:IO[0] <()>_R) ipv }
                         } in
                         server `cast` (Sym (GHC.Types.N:IO[0] <()>_R)))
                        (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         letrec {
                           a' :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Any #)
                             {- Arity: 1, Strictness: <S,U> -}
                           = \ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                             case Main.getUserLines2
                                    ww5
                                    (GHC.Types.[] @ GHC.Types.Char)
                                    s of ds1 { (#,#) ipv ipv1 ->
                             case GHC.Prim.atomically#
                                    @ ()
                                    (\ (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                     case ww6 of wild { Control.Concurrent.STM.TChan.TChan dt dt1 ->
                                     case GHC.Prim.readTVar#
                                            @ GHC.Prim.RealWorld
                                            @ (Control.Concurrent.STM.TChan.TVarList Main.Message)
                                            dt1
                                            eta1 of ds2 { (#,#) ipv2 ipv3 ->
                                     case GHC.Prim.newTVar#
                                            @ (Control.Concurrent.STM.TChan.TList Main.Message)
                                            @ GHC.Prim.RealWorld
                                            (Control.Concurrent.STM.TChan.TNil @ Main.Message)
                                            ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                                     case ipv3 of wild1 { GHC.Conc.Sync.TVar tvar# ->
                                     case GHC.Prim.writeTVar#
                                            @ GHC.Prim.RealWorld
                                            @ (Control.Concurrent.STM.TChan.TList Main.Message)
                                            tvar#
                                            (Control.Concurrent.STM.TChan.TCons
                                               @ Main.Message
                                               (Main.Command ipv1)
                                               ipv5)
                                            ipv4 of s2# { DEFAULT ->
                                     case GHC.Prim.writeTVar#
                                            @ GHC.Prim.RealWorld
                                            @ (Control.Concurrent.STM.TChan.TVarList Main.Message)
                                            dt1
                                            (GHC.Conc.Sync.TVar
                                               @ (Control.Concurrent.STM.TChan.TList Main.Message)
                                               ipv5)
                                            s2# of s2#1 { DEFAULT ->
                                     (# s2#1, GHC.Tuple.() #) } } } } } })
                                    ipv of ds2 { (#,#) ipv2 ipv3 ->
                             a' ipv2 } }
                         } in
                         a' eta)
                          `cast`
                        (Sym (GHC.Types.N:IO[0] <GHC.Prim.Any>_R))
                        (Control.Concurrent.Async.$fAlternativeConcurrently2
                           @ ()
                           @ GHC.Prim.Any)
                          `cast`
                        (<GHC.Types.IO
                            (Data.Either.Either
                               GHC.Exception.SomeException
                               (Data.Either.Either () GHC.Prim.Any))>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <Data.Either.Either () GHC.Prim.Any>_R))
                        w of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Tuple.() #) }) -}
aa19a71d63c69900734aa3ca2575913b
  $wsendToRoom ::
    GHC.Prim.Int#
    -> Control.Concurrent.STM.TChan.TChan Main.Message
    -> GHC.Prim.TVar#
         GHC.Prim.RealWorld (Data.Map.Base.Map GHC.Types.Int GHC.Types.Int)
    -> Main.Message
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U><L,1*U(A,U)><S,U><L,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Control.Concurrent.STM.TChan.TChan Main.Message)
                   (ww2 :: GHC.Prim.TVar#
                             GHC.Prim.RealWorld (Data.Map.Base.Map GHC.Types.Int GHC.Types.Int))
                   (w :: Main.Message)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.readTVar#
                        @ GHC.Prim.RealWorld
                        @ (Data.Map.Base.Map GHC.Types.Int GHC.Types.Int)
                        ww2
                        w1 of ds1 { (#,#) ipv ipv1 ->
                 case Main.$wpoly_go10 @ GHC.Types.Int ww ipv1 of wild {
                   GHC.Types.False -> (# ipv, GHC.Tuple.() #)
                   GHC.Types.True
                   -> Control.Concurrent.STM.TChan.writeTChan1
                        @ Main.Message
                        ww1
                        w
                        ipv } }) -}
2aee590b8b5240cf1fed1c1f189e6a31
  $wtalk ::
    GHC.Base.String
    -> GHC.Types.Int
    -> GHC.IO.Handle.Types.Handle
    -> Network.Socket.Types.Socket
    -> GHC.Conc.Sync.TVar (Data.Map.Base.Map GHC.Types.Int Main.Client)
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7,
     Strictness: <L,U><L,U><S,U><L,U(U(U),A,A,A,U(U))><L,U(U)><L,U(U)><S,U>,
     Inline: [0] -}
5fdc37c98a28a8a1e4ad682d1f5cb214
  data Client
    = Client {clientId :: GHC.Types.Int,
              clientIP :: GHC.Base.String,
              clientPort :: GHC.Types.Int,
              clientHandle :: GHC.IO.Handle.Types.Handle,
              clientSendChan :: Control.Concurrent.STM.TChan.TChan Main.Message,
              clientRoomRefs :: GHC.Conc.Sync.TVar
                                  (Data.Map.Base.Map GHC.Types.Int GHC.Types.Int)}
fbed4067a26e1dec37a31b9eba546428
  type ClientName = GHC.Base.String
2118b3f2a72b02076c477b5b6fc37bef
  data Message = Broadcast GHC.Base.String | Command GHC.Base.String
cb13d7f018fcb8b556db730c8275a3f3
  type RoomName = GHC.Base.String
c04b3470e04023a8860e2b8cd19af1ea
  type RoomRef = GHC.Types.Int
5c1b806388bf241ab2d043de36560568
  data Server
    = Server {sock :: Network.Socket.Types.Socket,
              clients :: GHC.Conc.Sync.TVar
                           (Data.Map.Base.Map GHC.Types.Int Main.Client),
              rooms :: GHC.Conc.Sync.TVar
                         (Data.Map.Base.Map Main.RoomName Main.RoomRef)}
0ee7a84d7f2ac763f6e5782fa979467b
  broadcast ::
    Main.Server
    -> GHC.Types.Int -> Main.Message -> GHC.Conc.Sync.STM ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LS(S)L),1*U(A,1*U(U),A)><L,U(U)><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.broadcast1
                  `cast`
                (<Main.Server>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <Main.Message>_R
                 ->_R Sym (GHC.Conc.Sync.N:STM[0] <()>_R)) -}
bf86ef202b90602eb6c3f8b7d3307573
  broadcast1 ::
    Main.Server
    -> GHC.Types.Int
    -> Main.Message
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LS(S)L),1*U(A,1*U(U),A)><L,U(U)><L,U><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Main.Server)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Main.Message)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { Main.Server ww1 ww2 ww3 ->
                 case ww2 of ww4 { GHC.Conc.Sync.TVar ww5 ->
                 Main.$wbroadcast ww5 w1 w2 w3 } }) -}
45324ee44e058343a8d08de9eb117f7e
  broadcast2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s, GHC.Tuple.() #)) -}
04e35c420a5f99766991edfe8003eddf
  chat ::
    Main.Server
    -> Main.Client -> GHC.Base.String -> GHC.Types.IO GHC.Types.Bool
  {- Arity: 4,
     Strictness: <L,1*U(A,1*U(U),A)><S,1*U(A,A,A,U,A,A)><S,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.chat1
                  `cast`
                (<Main.Server>_R
                 ->_R <Main.Client>_R
                 ->_R <GHC.Base.String>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Bool>_R)) -}
d8219f0e4dc1d23852876ef490bc495a
  chat1 ::
    Main.Server
    -> Main.Client
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 4,
     Strictness: <L,1*U(A,1*U(U),A)><S,1*U(A,A,A,U,A,A)><S,U><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Main.Server)
                   (w1 :: Main.Client)
                   (w2 :: GHC.Base.String)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w1 of ww { Main.Client ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$wchat w ww4 w2 w3 }) -}
4dee66950a695e212c8dc29a6b0fc49f
  checkAddRoom ::
    Main.Server
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.IO.Handle.Types.Handle
    -> GHC.Types.IO Main.Client
  {- Arity: 6,
     Strictness: <S(LS(S)L),1*U(A,1*U(U),A)><L,U(U)><L,U><L,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.checkAddRoom1
                  `cast`
                (<Main.Server>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <GHC.IO.Handle.Types.Handle>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Main.Client>_R)) -}
a0d02f9c8375670c83b9af6518578d6d
  checkAddRoom1 ::
    Main.Server
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.IO.Handle.Types.Handle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.Client #)
  {- Arity: 6,
     Strictness: <S(LS(S)L),1*U(A,1*U(U),A)><L,U(U)><L,U><L,U><L,U><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ (w :: Main.Server)
                   (w1 :: GHC.Types.Int)
                   (w2 :: GHC.Base.String)
                   (w3 :: GHC.Types.Int)
                   (w4 :: GHC.IO.Handle.Types.Handle)
                   (w5 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { Main.Server ww1 ww2 ww3 ->
                 case ww2 of ww4 { GHC.Conc.Sync.TVar ww5 ->
                 Main.$wcheckAddRoom ww5 w1 w2 w3 w4 w5 } }) -}
00887589f8233fbc7cca2e061bb7822f
  clientHandle :: Main.Client -> GHC.IO.Handle.Types.Handle
  RecSel Left Main.Client
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLL),1*U(A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Client) ->
                 case ds of wild { Main.Client ds1 ds2 ds3 ds4 ds5 ds6 -> ds4 }) -}
b14eee6aa556d6b61246a3a5997f5e0b
  clientIP :: Main.Client -> GHC.Base.String
  RecSel Left Main.Client
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLL),1*U(A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Client) ->
                 case ds of wild { Main.Client ds1 ds2 ds3 ds4 ds5 ds6 -> ds2 }) -}
7d99ba142d4df2d3936b2669e978c16b
  clientId :: Main.Client -> GHC.Types.Int
  RecSel Left Main.Client
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLL),1*U(1*U(U),A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Client) ->
                 case ds of wild { Main.Client ds1 ds2 ds3 ds4 ds5 ds6 -> ds1 }) -}
8cb139f454876b1315651d51c27f15d2
  clientPort :: Main.Client -> GHC.Types.Int
  RecSel Left Main.Client
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLL),1*U(A,A,1*U(U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Client) ->
                 case ds of wild { Main.Client ds1 ds2 ds3 ds4 ds5 ds6 -> ds3 }) -}
a73e4c171089e06e47859983df6e1f1a
  clientRoomRefs ::
    Main.Client
    -> GHC.Conc.Sync.TVar
         (Data.Map.Base.Map GHC.Types.Int GHC.Types.Int)
  RecSel Left Main.Client
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLS),1*U(A,A,A,A,A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Client) ->
                 case ds of wild { Main.Client ds1 ds2 ds3 ds4 ds5 ds6 -> ds6 }) -}
bdcb114a63f982d088c63a7db974f774
  clientSendChan ::
    Main.Client -> Control.Concurrent.STM.TChan.TChan Main.Message
  RecSel Left Main.Client
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSL),1*U(A,A,A,A,1*U(U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Client) ->
                 case ds of wild { Main.Client ds1 ds2 ds3 ds4 ds5 ds6 -> ds5 }) -}
3c3f4f14b2ef77beb281db2594e97856
  clients ::
    Main.Server
    -> GHC.Conc.Sync.TVar (Data.Map.Base.Map GHC.Types.Int Main.Client)
  RecSel Left Main.Server
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Server) ->
                 case ds of wild { Main.Server ds1 ds2 ds3 -> ds2 }) -}
dcada62f08ca7562bf1689d8e60f48af
  disconnect ::
    Main.Server
    -> Main.Client -> GHC.Base.String -> GHC.Types.IO GHC.Types.Bool
  {- Arity: 4, Strictness: <L,A><S,1*U(A,A,A,U,A,A)><S,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.disconnect1
                  `cast`
                (<Main.Server>_R
                 ->_R <Main.Client>_R
                 ->_R <GHC.Base.String>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Bool>_R)) -}
55839fb81894bf18b0bdaa33920828da
  disconnect1 ::
    Main.Server
    -> Main.Client
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 4, Strictness: <L,A><S,1*U(A,A,A,U,A,A)><S,U><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Main.Server)
                   (w1 :: Main.Client)
                   (w2 :: GHC.Base.String)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w1 of ww { Main.Client ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$wdisconnect ww4 w2 w3 }) -}
37ebdf4525ff175f31659559b3d0b0b5
  getUserLines ::
    GHC.IO.Handle.Types.Handle -> GHC.Types.IO GHC.Base.String
  {- Arity: 2, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.getUserLines1
                  `cast`
                (<GHC.IO.Handle.Types.Handle>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R)) -}
390413715b7dfc00c831c5071e0d5225
  getUserLines1 ::
    GHC.IO.Handle.Types.Handle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 2, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (hdl :: GHC.IO.Handle.Types.Handle)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.getUserLines2 hdl (GHC.Types.[] @ GHC.Types.Char) eta) -}
be7fcbf0c17688d6d0cb5d0f4b1abe5d
  getUserLines2 ::
    GHC.IO.Handle.Types.Handle
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 3, Strictness: <S,U><L,U><S,U> -}
bf2e359654be6947c54d5cc7c1a796d1
  go ::
    GHC.IO.Handle.Types.Handle
    -> GHC.Base.String -> GHC.Types.IO GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.getUserLines2
                  `cast`
                (<GHC.IO.Handle.Types.Handle>_R
                 ->_R <GHC.Base.String>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R)) -}
f44d1a06eab1322d1baec36b21d43307
  handleMessage ::
    Main.Server
    -> Main.Client -> Main.Message -> GHC.Types.IO GHC.Types.Bool
  {- Arity: 4,
     Strictness: <L,1*U(1*U(U(U),A,A,A,1*U(U)),1*U(U),A)><S,1*U(1*U(U),1*U,1*U(U),U,A,U(U))><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.handleMessage1
                  `cast`
                (<Main.Server>_R
                 ->_R <Main.Client>_R
                 ->_R <Main.Message>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Bool>_R)) -}
18105019980e0edccf19b27a65ab655a
  handleMessage1 ::
    Main.Server
    -> Main.Client
    -> Main.Message
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 4,
     Strictness: <L,1*U(1*U(U(U),A,A,A,1*U(U)),1*U(U),A)><S,1*U(1*U(U),1*U,1*U(U),U,A,U(U))><S,1*U><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Main.Server)
                   (w1 :: Main.Client)
                   (w2 :: Main.Message)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w1 of ww { Main.Client ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$whandleMessage w ww1 ww2 ww3 ww4 ww6 w2 w3 }) -}
4f1a16d201f2029a365aa473f816c80e
  heloText ::
    Main.Server -> Main.Client -> GHC.Types.IO GHC.Types.Bool
  {- Arity: 3,
     Strictness: <S,1*H><S(LLLSLL),1*U(A,1*U,1*U(U),U,A,A)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.heloText1
                  `cast`
                (<Main.Server>_R
                 ->_R <Main.Client>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Bool>_R)) -}
9c209d912f9f0d5f814e65f37fbde2e3
  heloText1 ::
    Main.Server
    -> Main.Client
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 3,
     Strictness: <S,1*H><S(LLLSLL),1*U(A,1*U,1*U(U),U,A,A)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Main.Server)
                   (w1 :: Main.Client)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of w3 { Main.Server ipv ipv1 ipv2 ->
                 case w1 of ww { Main.Client ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$wheloText w3 ww2 ww3 ww4 w2 } }) -}
dbaa2ffb045a99bdd6a73954b9f26a45
  heloText2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "\n\
                   \StudentID:13326255\n"#) -}
5431c1119d2abe268356008084de6269
  joinChatroom ::
    Main.Server
    -> Main.Client -> GHC.Base.String -> GHC.Types.IO GHC.Types.Bool
  {- Arity: 4,
     Strictness: <L,1*U(A,1*U(U),A)><S,1*U(1*U(U),A,A,U,A,U(U))><S,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.joinChatroom1
                  `cast`
                (<Main.Server>_R
                 ->_R <Main.Client>_R
                 ->_R <GHC.Base.String>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Bool>_R)) -}
210e91c400ef3c1a3ddf84409359ac26
  joinChatroom1 ::
    Main.Server
    -> Main.Client
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 4,
     Strictness: <L,1*U(A,1*U(U),A)><S,1*U(1*U(U),A,A,U,A,U(U))><S,U><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Main.Server)
                   (w1 :: Main.Client)
                   (w2 :: GHC.Base.String)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w1 of ww { Main.Client ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$wjoinChatroom w ww1 ww4 ww6 w2 w3 }) -}
1212b17e4fd3a7e5c6c711c85db6c87b
  killService ::
    Main.Server -> Main.Client -> GHC.Types.IO GHC.Types.Bool
  {- Arity: 3,
     Strictness: <S(S(LLLLS(S))LL),1*U(1*U(U(U),A,A,A,1*U(U)),A,A)><S,1*H><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.killService1
                  `cast`
                (<Main.Server>_R
                 ->_R <Main.Client>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Bool>_R)) -}
f6ecd9baa83a4353f9434d9ad341660b
  killService1 ::
    Main.Server
    -> Main.Client
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 3,
     Strictness: <S(S(LLLLS(S))LL),1*U(1*U(U(U),A,A,A,1*U(U)),A,A)><S,1*H><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (server :: Main.Server)
                   (ds :: Main.Client)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case server of wild { Main.Server ds1 ds2 ds3 ->
                 case ds of wild1 { Main.Client ds4 ds5 ds6 ds7 ds8 ds9 ->
                 case ds1 of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case ww5 of ww6 { GHC.MVar.MVar ww7 ->
                 case Network.Socket.$wclose ww1 ww7 eta of ds10 { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Types.True #) } } } } }) -}
78e1f2da4f6f33d6e4e6e03710eb8aea
  leaveChatroom ::
    Main.Server
    -> Main.Client -> GHC.Base.String -> GHC.Types.IO GHC.Types.Bool
  {- Arity: 4,
     Strictness: <L,1*U(A,1*U(U),A)><S,1*U(1*U(U),A,A,U,A,U(U))><S,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.leaveChatroom1
                  `cast`
                (<Main.Server>_R
                 ->_R <Main.Client>_R
                 ->_R <GHC.Base.String>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Bool>_R)) -}
425dcb89575573e9ff31215f28a9679c
  leaveChatroom1 ::
    Main.Server
    -> Main.Client
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 4,
     Strictness: <L,1*U(A,1*U(U),A)><S,1*U(1*U(U),A,A,U,A,U(U))><S,U><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Main.Server)
                   (w1 :: Main.Client)
                   (w2 :: GHC.Base.String)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w1 of ww { Main.Client ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$wleaveChatroom w ww1 ww4 ww6 w2 w3 }) -}
d9c0dee8a685c5ed422401aaa63f23bf
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
01d62c2c484918d4b5d94b688c90c90e
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
129a1a814fa667791781f32a098e848d
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
84450622d25c04fd04f97aefc5b74ac5
  mainLoop ::
    Main.Server
    -> Network.Socket.Types.Socket
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.IO ()
  {- Arity: 5,
     Strictness: <L,U(U(U(U),A,A,A,U(U)),U(U),A)><S(LSLLS(S)),1*U(U(U),U,U,U(U),U(U))><L,U><L,U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.mainLoop1
                  `cast`
                (<Main.Server>_R
                 ->_R <Network.Socket.Types.Socket>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
ec5723d650572e577d5058d4ff3a920e
  mainLoop1 ::
    Main.Server
    -> Network.Socket.Types.Socket
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <L,U(U(U(U),A,A,A,U(U)),U(U),A)><S(LSLLS(S)),1*U(U(U),U,U,U(U),U(U))><L,U><L,U(U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ (w :: Main.Server)
                   (w1 :: Network.Socket.Types.Socket)
                   (w2 :: GHC.Types.Int)
                   (w3 :: GHC.Types.Int)
                   (w4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w1 of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case ww5 of ww6 { GHC.MVar.MVar ww7 ->
                 Main.$wmainLoop w ww1 ww2 ww3 ww4 ww7 w2 w3 w4 } }) -}
360f9d6c120e0d26682755911d2169fb
  newClient ::
    GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.IO.Handle.Types.Handle
    -> GHC.Conc.Sync.STM Main.Client
  {- Arity: 5, HasNoCafRefs, Strictness: <L,U><L,U><L,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.newClient1
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <GHC.IO.Handle.Types.Handle>_R
                 ->_R Sym (GHC.Conc.Sync.N:STM[0] <Main.Client>_R)) -}
f8cde3c83fa87c13bd30f3babb00cff2
  newClient1 ::
    GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.IO.Handle.Types.Handle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.Client #)
  {- Arity: 5, HasNoCafRefs, Strictness: <L,U><L,U><L,U><L,U><S,U>,
     Unfolding: InlineRule (5, True, False)
                (\ (id :: GHC.Types.Int)
                   (host :: GHC.Base.String)
                   (port :: GHC.Types.Int)
                   (handle :: GHC.IO.Handle.Types.Handle)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newTVar#
                        @ (Control.Concurrent.STM.TChan.TList Main.Message)
                        @ GHC.Prim.RealWorld
                        (Control.Concurrent.STM.TChan.TNil @ Main.Message)
                        eta of ds { (#,#) ipv ipv1 ->
                 let {
                   hole :: GHC.Conc.Sync.TVar
                             (Control.Concurrent.STM.TChan.TList Main.Message)
                   = GHC.Conc.Sync.TVar
                       @ (Control.Concurrent.STM.TChan.TList Main.Message)
                       ipv1
                 } in
                 case GHC.Prim.newTVar#
                        @ (GHC.Conc.Sync.TVar
                             (Control.Concurrent.STM.TChan.TList Main.Message))
                        @ GHC.Prim.RealWorld
                        hole
                        ipv of ds1 { (#,#) ipv2 ipv3 ->
                 case GHC.Prim.newTVar#
                        @ (GHC.Conc.Sync.TVar
                             (Control.Concurrent.STM.TChan.TList Main.Message))
                        @ GHC.Prim.RealWorld
                        hole
                        ipv2 of ds2 { (#,#) ipv4 ipv5 ->
                 case GHC.Prim.newTVar#
                        @ (Data.Map.Base.Map GHC.Types.Int GHC.Types.Int)
                        @ GHC.Prim.RealWorld
                        (Data.Map.Base.Tip @ GHC.Types.Int @ GHC.Types.Int)
                        ipv4 of ds4 { (#,#) ipv7 ipv8 ->
                 (# ipv7,
                    Main.Client
                      id
                      host
                      port
                      handle
                      (Control.Concurrent.STM.TChan.TChan @ Main.Message ipv3 ipv5)
                      (GHC.Conc.Sync.TVar
                         @ (Data.Map.Base.Map GHC.Types.Int GHC.Types.Int)
                         ipv8) #) } } } }) -}
780ecd295f6cc863c797b6750c85975d
  newServer ::
    Network.Socket.Types.Socket -> GHC.Types.IO Main.Server
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.newServer1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Main.Server>_R)) -}
85885a842fa10f1d2c28b48fbd9b23d4
  newServer1 ::
    Network.Socket.Types.Socket
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.Server #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (s :: Network.Socket.Types.Socket)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newTVar#
                        @ (Data.Map.Base.Map GHC.Types.Int Main.Client)
                        @ GHC.Prim.RealWorld
                        (Data.Map.Base.Tip @ GHC.Types.Int @ Main.Client)
                        eta of ds { (#,#) ipv ipv1 ->
                 case GHC.Prim.newTVar#
                        @ (Data.Map.Base.Map Main.RoomName Main.RoomRef)
                        @ GHC.Prim.RealWorld
                        (Data.Map.Base.Tip @ Main.RoomName @ Main.RoomRef)
                        ipv of ds1 { (#,#) ipv2 ipv3 ->
                 (# ipv2,
                    Main.Server
                      s
                      (GHC.Conc.Sync.TVar
                         @ (Data.Map.Base.Map GHC.Types.Int Main.Client)
                         ipv1)
                      (GHC.Conc.Sync.TVar
                         @ (Data.Map.Base.Map Main.RoomName Main.RoomRef)
                         ipv3) #) } }) -}
8ffdc40fbfce0603f548419f8886ae79
  removeClient :: Main.Server -> GHC.Types.Int -> GHC.Types.IO ()
  {- Arity: 3,
     Strictness: <S(LS(S)L),1*U(A,1*U(U),A)><S,1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.removeClient1
                  `cast`
                (<Main.Server>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
b93d949b08ed47079c67784f2bb935f4
  removeClient1 ::
    Main.Server
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3,
     Strictness: <S(LS(S)L),1*U(A,1*U(U),A)><S,1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (server :: Main.Server)
                   (id :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case server of wild { Main.Server ds ds1 ds2 ->
                 GHC.Prim.atomically#
                   @ ()
                   (\ (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case ds1 of wild1 { GHC.Conc.Sync.TVar tvar# ->
                    case GHC.Prim.readTVar#
                           @ GHC.Prim.RealWorld
                           @ (Data.Map.Base.Map GHC.Types.Int Main.Client)
                           tvar#
                           eta1 of ds3 { (#,#) ipv ipv1 ->
                    case Main.$sdelete_$sgo10 @ Main.Client id ipv1 of vx { DEFAULT ->
                    case GHC.Prim.writeTVar#
                           @ GHC.Prim.RealWorld
                           @ (Data.Map.Base.Map GHC.Types.Int Main.Client)
                           tvar#
                           vx
                           ipv of s2# { DEFAULT ->
                    (# s2#, GHC.Tuple.() #) } } } })
                   eta }) -}
8f8d98129df57cb4fa297d959f8ae286
  rooms ::
    Main.Server
    -> GHC.Conc.Sync.TVar
         (Data.Map.Base.Map Main.RoomName Main.RoomRef)
  RecSel Left Main.Server
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Server) ->
                 case ds of wild { Main.Server ds1 ds2 ds3 -> ds3 }) -}
e566ad304f4e6f770508b58e56adbf72
  runClient :: Main.Server -> Main.Client -> GHC.Types.IO ()
  {- Arity: 3,
     Strictness: <S,1*U(U(U(U),A,A,A,U(U)),U(U),A)><S,1*U(U(U),U,U(U),U,U(U,U),U(U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.runClient1
                  `cast`
                (<Main.Server>_R
                 ->_R <Main.Client>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
94bdc8bf4313b0d677f6473e18c579d1
  runClient1 ::
    Main.Server
    -> Main.Client
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3,
     Strictness: <S,1*U(U(U(U),A,A,A,U(U)),U(U),A)><S,1*U(U(U),U,U(U),U,U(U,U),U(U))><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Main.Server)
                   (w1 :: Main.Client)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { Main.Server ww1 ww2 ww3 ->
                 case w1 of ww4 { Main.Client ww5 ww6 ww7 ww8 ww9 ww10 ->
                 Main.$wrunClient ww1 ww2 ww5 ww6 ww7 ww8 ww9 ww10 w2 } }) -}
f6f1678adedb5dbf62bd40e00f0293b1
  runClient2 ::
    GHC.Conc.Sync.TVar (Data.Map.Base.Map Main.RoomName Main.RoomRef)
  {- Strictness: x -}
a7e54a5b5f183ba4d08848649f85b155
  sendToRoom ::
    GHC.Types.Int
    -> Main.Client -> Main.Message -> GHC.Conc.Sync.STM ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U(U)><S(LLLLLS(S)),1*U(A,A,A,A,1*U(A,U),1*U(U))><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.sendToRoom1
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R <Main.Client>_R
                 ->_R <Main.Message>_R
                 ->_R Sym (GHC.Conc.Sync.N:STM[0] <()>_R)) -}
564c81f15be6bc05561c97168d5126a3
  sendToRoom1 ::
    GHC.Types.Int
    -> Main.Client
    -> Main.Message
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U(U)><S(LLLLLS(S)),1*U(A,A,A,A,1*U(A,U),1*U(U))><L,U><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.Client)
                   (w2 :: Main.Message)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Main.Client ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case ww8 of ww9 { GHC.Conc.Sync.TVar ww10 ->
                 Main.$wsendToRoom ww1 ww7 ww10 w2 w3 } } }) -}
8e2bb69dd3e55039f3a885de7a9ecb7c
  sock :: Main.Server -> Network.Socket.Types.Socket
  RecSel Left Main.Server
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U(U,U,U,U,U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Server) ->
                 case ds of wild { Main.Server ds1 ds2 ds3 -> ds1 }) -}
321d30cf320c8ae6c9071eba391e5e5c
  talk ::
    GHC.Base.String
    -> GHC.Types.Int
    -> GHC.IO.Handle.Types.Handle
    -> Main.Server
    -> GHC.Types.Int
    -> GHC.Types.IO ()
  {- Arity: 6,
     Strictness: <L,U><L,U><S,U><S,1*U(U(U(U),A,A,A,U(U)),U(U),A)><L,U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.talk1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <GHC.IO.Handle.Types.Handle>_R
                 ->_R <Main.Server>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
24dd7c19f578b78baffaedb8c72abc4c
  talk1 ::
    GHC.Base.String
    -> GHC.Types.Int
    -> GHC.IO.Handle.Types.Handle
    -> Main.Server
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6,
     Strictness: <L,U><L,U><S,U><S,1*U(U(U(U),A,A,A,U(U)),U(U),A)><L,U(U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ (w :: GHC.Base.String)
                   (w1 :: GHC.Types.Int)
                   (w2 :: GHC.IO.Handle.Types.Handle)
                   (w3 :: Main.Server)
                   (w4 :: GHC.Types.Int)
                   (w5 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w3 of ww { Main.Server ww1 ww2 ww3 ->
                 Main.$wtalk w w1 w2 ww1 ww2 w4 w5 }) -}
"SPEC/Main $fPrintfArg[]_$cparseFormat @ Char" [ALWAYS] forall ($dIsChar :: Text.Printf.IsChar
                                                                              GHC.Types.Char)
  Text.Printf.$fPrintfArg[]_$cparseFormat @ GHC.Types.Char $dIsChar
  = Main.$s$fPrintfArg[]_$s$fPrintfArg[]_$cparseFormat
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

