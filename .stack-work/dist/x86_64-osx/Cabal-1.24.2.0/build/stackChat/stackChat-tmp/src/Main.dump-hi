
==================== FINAL INTERFACE ====================
2017-11-01 23:18:36.095417 UTC

interface main@main:Main 8002
  interface hash: 20d2ff46f9ff742eabe964f860c9501e
  ABI hash: 8887b30aa193675649cdf7e14c502dd3
  export-list hash: 10d1e5d19661c89dcde27ddcbc1ca581
  orphan hash: e3f907cc77bbc0eb7e4f425dad3f8e77
  flag hash: 4a911ef96c2b9d76f64eec71abf04ce6
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.broadcast
  Main.checkAddRoom
  Main.getUserLines
  Main.go
  Main.handleMessage
  Main.joinChatroom
  Main.main
  Main.mainLoop
  Main.newClient
  Main.newServer
  Main.removeClient
  Main.runClient
  Main.sendMessage
  Main.sendToName
  Main.sendToRoom
  Main.talk
  Main.Client{Main.Client clientHandle clientIP clientId clientPort clientRoomRefs clientSendChan}
  Main.ClientName
  Main.Message{Main.Broadcast Main.Command Main.Notice}
  Main.RoomName
  Main.RoomRef
  Main.Server{Main.Server clients rooms}
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1
                      async-2.1.1.1@async-2.1.1.1-8yywY4inVGRLJSCg60gBXj base-4.9.1.0
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      network-2.6.3.2@network-2.6.3.2-IsLM4TXcLoRI0fmmBYVyQz
                      stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         network-2.6.3.2@network-2.6.3.2-IsLM4TXcLoRI0fmmBYVyQz:Network.Socket
         stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Monad.STM
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
import  -/  async-2.1.1.1@async-2.1.1.1-8yywY4inVGRLJSCg60gBXj:Control.Concurrent.Async ea0392541014747b7209d5d4a7804b6a
import  -/  base-4.9.1.0:Control.Concurrent 2ee6a0a58489520b9a96d8fef10380fa
import  -/  base-4.9.1.0:Control.Exception a76dd9666251322fe34dbcca3a0817bf
import  -/  base-4.9.1.0:Control.Exception.Base 1e106916283856f4d9caeddab92cd861
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.Maybe d876c4ffe4b3c43755a781e8ad860d88
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Conc.Sync 8d0a228e5fc4d8c110495066f4d52ea1
import  -/  base-4.9.1.0:GHC.IO.Handle ba98a5b34d78cbf48b41fe58a3735c69
import  -/  base-4.9.1.0:GHC.IO.Handle.Text b65719f3b262b071ab1aabeb72fc9d8b
import  -/  base-4.9.1.0:GHC.IO.Handle.Types 17aa0e2ab137800e3a31992d780c071f
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.Environment 08cb808e8e6a7821e6f8cfa76a977431
import  -/  base-4.9.1.0:System.IO c9de64c5f5407c4cf1c52500c4d15200
import  -/  base-4.9.1.0:Text.Printf 6701574960cd2af960fec5d940be0c25
import  -/  base-4.9.1.0:Text.Read 75c59863e882ebaec4532e9465e2ee9b
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 0fd5c8559af8bc4b6f38b9cf9ba5a467
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base 8b155a212edaca6c85bcefe65a8bc505
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  network-2.6.3.2@network-2.6.3.2-IsLM4TXcLoRI0fmmBYVyQz:Network e1c2bc629a33bc735be38b505b5877ff
import  -/  network-2.6.3.2@network-2.6.3.2-IsLM4TXcLoRI0fmmBYVyQz:Network.Socket.Internal 9f052186d90733a29fe9bf6bf8921c1c
import  -/  network-2.6.3.2@network-2.6.3.2-IsLM4TXcLoRI0fmmBYVyQz:Network.Socket.Types 2eb8a83dc42cc86a12e652ce3294cbda
import  -/  stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Concurrent.STM 3662559905a40ae5adbc3e935ac706c8
import  -/  stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Concurrent.STM.TChan 791cd378857d88a7ed4d753121139423
import  -/  stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Concurrent.STM.TVar 8271fdeaf6f41f205dbe31243cf91390
a846f91ed410bfd476ab850310e22e30
  $s$fPrintfArg[]_$s$fPrintfArg[]_$cparseFormat ::
    [GHC.Types.Char] -> Text.Printf.ModifierParser
  {- Arity: 2, Strictness: <L,A><S,1*U>m,
     Unfolding: InlineRule (2, True, False)
                (\ (ds1 :: [GHC.Types.Char]) (ds2 :: [GHC.Types.Char]) ->
                 case ds2 of wild {
                   [] -> Text.Printf.errorShortFormat @ Text.Printf.FormatParse
                   : c1 cs
                   -> Text.Printf.FormatParse
                        (GHC.Types.[] @ GHC.Types.Char)
                        c1
                        cs }) -}
c4753614eb4bb6049a700384e568c5c0
  $sprintf3 :: () GHC.Types.~~ ()
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Eq# @ * @ * @ () @ () @~ <()>_N) -}
6210aa73a4bb794a27ad3ad0105b5910
  $tc'Broadcast :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3142049783279842247##
                   10598622670723664079##
                   Main.$trModule
                   Main.$tc'Broadcast1) -}
99f3455298ef37c6bc51a517745ed47c
  $tc'Broadcast1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Broadcast"#) -}
e62d791731323355b04c005ddd44e49e
  $tc'Client :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14317905627767584460##
                   8020356174247805466##
                   Main.$trModule
                   Main.$tc'Client1) -}
1e31cdcbef3d5a45efde6decabdcaefc
  $tc'Client1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Client"#) -}
71a1d0da8ac90eb52db4e0337dee0105
  $tc'Command :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14407055736893994245##
                   9773285697625515779##
                   Main.$trModule
                   Main.$tc'Command1) -}
df8b35970719712831612cdf74ffb012
  $tc'Command1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Command"#) -}
57b1ac4201832c30493ec9a295c14d2f
  $tc'Notice :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15229285715904568610##
                   3488434391775625185##
                   Main.$trModule
                   Main.$tc'Notice1) -}
f3b0346477898073dacc46ad3023034c
  $tc'Notice1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Notice"#) -}
e2e47e4b095050486d76025efbb9eb8d
  $tc'Server :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17147978485207381799##
                   15204794003762209136##
                   Main.$trModule
                   Main.$tc'Server1) -}
0a4a60082ab2028484dd711c5f968b45
  $tc'Server1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Server"#) -}
824c8b6e5d1e111a64ffa02e17dfa0f0
  $tcClient :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2041806266336690928##
                   6211083142683335045##
                   Main.$trModule
                   Main.$tcClient1) -}
f6308ac30128598c150371405caec582
  $tcClient1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Client"#) -}
a317a2b68abab7bca30880bdf39d36dc
  $tcMessage :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11750200497582023075##
                   1107912994446066806##
                   Main.$trModule
                   Main.$tcMessage1) -}
9d158e0a5fe47b777c8610b9e6ae8f21
  $tcMessage1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Message"#) -}
6aba3734e0be30f8602a90a2af677de2
  $tcServer :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7505357571270362355##
                   10136080178563477716##
                   Main.$trModule
                   Main.$tcServer1) -}
9dec17e7d0d7ed6f4ff7f48675023568
  $tcServer1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Server"#) -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
9a052e776d9ba13d6eb6d3875b088761
  $w$sgo1 ::
    GHC.Prim.Int#
    -> a1
    -> Data.Map.Base.Map GHC.Types.Int a1
    -> Data.Map.Base.Map GHC.Types.Int a1
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [0] -}
30b69a2add2fa838a419cc059f94c040
  $w$sgo10 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map GHC.Types.Int a1
    -> Data.Map.Base.Map GHC.Types.Int a1
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
e50677320a4cbf472ffdf8191df7b19c
  $wbroadcast ::
    GHC.Prim.TVar#
      GHC.Prim.RealWorld (Data.Map.Base.Map GHC.Types.Int Main.Client)
    -> GHC.Types.Int
    -> Main.Message
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, HasNoCafRefs, Strictness: <S,U><L,U><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.TVar#
                            GHC.Prim.RealWorld (Data.Map.Base.Map GHC.Types.Int Main.Client))
                   (w :: GHC.Types.Int)
                   (w1 :: Main.Message)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.readTVar#
                        @ GHC.Prim.RealWorld
                        @ (Data.Map.Base.Map GHC.Types.Int Main.Client)
                        ww
                        w2 of ds1 { (#,#) ipv ipv1 ->
                 letrec {
                   go10 :: GHC.Conc.Sync.STM ()
                           -> Data.Map.Base.Map GHC.Types.Int Main.Client
                           -> GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     {- Arity: 3, Strictness: <C(S),1*C1(U(U,U))><S,1*U><S,U> -}
                   = \ (z' :: GHC.Conc.Sync.STM ())
                       (ds :: Data.Map.Base.Map GHC.Types.Int Main.Client)
                       (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case ds of wild {
                       Data.Map.Base.Bin dt kx x l r
                       -> go10
                            (\ (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                             case x of wild1 { Main.Client ds2 ds3 ds4 ds5 ds6 ds7 ->
                             case ds7 of wild2 { GHC.Conc.Sync.TVar tvar# ->
                             case GHC.Prim.readTVar#
                                    @ GHC.Prim.RealWorld
                                    @ [GHC.Types.Int]
                                    tvar#
                                    eta1 of ds8 { (#,#) ipv2 ipv3 ->
                             case GHC.List.elem
                                    @ GHC.Types.Int
                                    GHC.Classes.$fEqInt
                                    w
                                    ipv3 of wild3 {
                               GHC.Types.False -> go10 z' r ipv2
                               GHC.Types.True
                               -> case ds6 of wild4 { Control.Concurrent.STM.TChan.TChan dt1 dt2 ->
                                  case GHC.Prim.readTVar#
                                         @ GHC.Prim.RealWorld
                                         @ (Control.Concurrent.STM.TChan.TVarList Main.Message)
                                         dt2
                                         ipv2 of ds9 { (#,#) ipv4 ipv5 ->
                                  case GHC.Prim.newTVar#
                                         @ (Control.Concurrent.STM.TChan.TList Main.Message)
                                         @ GHC.Prim.RealWorld
                                         (Control.Concurrent.STM.TChan.TNil @ Main.Message)
                                         ipv4 of ds10 { (#,#) ipv6 ipv7 ->
                                  case ipv5 of wild5 { GHC.Conc.Sync.TVar tvar#1 ->
                                  case GHC.Prim.writeTVar#
                                         @ GHC.Prim.RealWorld
                                         @ (Control.Concurrent.STM.TChan.TList Main.Message)
                                         tvar#1
                                         (Control.Concurrent.STM.TChan.TCons @ Main.Message w1 ipv7)
                                         ipv6 of s2# { DEFAULT ->
                                  case GHC.Prim.writeTVar#
                                         @ GHC.Prim.RealWorld
                                         @ (Control.Concurrent.STM.TChan.TVarList Main.Message)
                                         dt2
                                         (GHC.Conc.Sync.TVar
                                            @ (Control.Concurrent.STM.TChan.TList Main.Message)
                                            ipv7)
                                         s2# of s2#1 { DEFAULT ->
                                  go10 z' r s2#1 } } } } } } } } } })
                              `cast`
                            (Sym (GHC.Conc.Sync.N:STM[0] <()>_R))
                            l
                            eta
                       Data.Map.Base.Tip
                       -> z' `cast` (GHC.Conc.Sync.N:STM[0] <()>_R) eta }
                 } in
                 go10
                   Main.broadcast2 `cast` (Sym (GHC.Conc.Sync.N:STM[0] <()>_R))
                   ipv1
                   ipv }) -}
09dacdf793fa95dd6c26b696f3aadacc
  $wcheckAddRoom ::
    GHC.Prim.TVar#
      GHC.Prim.RealWorld (Data.Map.Base.Map GHC.Types.Int Main.Client)
    -> GHC.Types.Int
    -> GHC.Base.String
    -> Network.Socket.Types.PortNumber
    -> GHC.IO.Handle.Types.Handle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.Client #)
  {- Arity: 6, Strictness: <S,U><L,U(U)><L,U><L,U><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.TVar#
                            GHC.Prim.RealWorld (Data.Map.Base.Map GHC.Types.Int Main.Client))
                   (w :: GHC.Types.Int)
                   (w1 :: GHC.Base.String)
                   (w2 :: Network.Socket.Types.PortNumber)
                   (w3 :: GHC.IO.Handle.Types.Handle)
                   (w4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 GHC.Prim.atomically#
                   @ Main.Client
                   (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case GHC.Prim.readTVar#
                           @ GHC.Prim.RealWorld
                           @ (Data.Map.Base.Map GHC.Types.Int Main.Client)
                           ww
                           s of ds1 { (#,#) ipv ipv1 ->
                    case GHC.Prim.newTVar#
                           @ (Control.Concurrent.STM.TChan.TList Main.Message)
                           @ GHC.Prim.RealWorld
                           (Control.Concurrent.STM.TChan.TNil @ Main.Message)
                           ipv of ds { (#,#) ipv2 ipv3 ->
                    let {
                      hole :: GHC.Conc.Sync.TVar
                                (Control.Concurrent.STM.TChan.TList Main.Message)
                        {- Strictness: m -}
                      = GHC.Conc.Sync.TVar
                          @ (Control.Concurrent.STM.TChan.TList Main.Message)
                          ipv3
                    } in
                    case GHC.Prim.newTVar#
                           @ (GHC.Conc.Sync.TVar
                                (Control.Concurrent.STM.TChan.TList Main.Message))
                           @ GHC.Prim.RealWorld
                           hole
                           ipv2 of ds2 { (#,#) ipv4 ipv5 ->
                    case GHC.Prim.newTVar#
                           @ (GHC.Conc.Sync.TVar
                                (Control.Concurrent.STM.TChan.TList Main.Message))
                           @ GHC.Prim.RealWorld
                           hole
                           ipv4 of ds3 { (#,#) ipv6 ipv7 ->
                    case GHC.Prim.newTVar#
                           @ [GHC.Types.Int]
                           @ GHC.Prim.RealWorld
                           (GHC.Types.[] @ GHC.Types.Int)
                           ipv6 of ds4 { (#,#) ipv8 ipv9 ->
                    let {
                      ipv10 :: Control.Concurrent.STM.TChan.TChan Main.Message
                        {- Strictness: m -}
                      = Control.Concurrent.STM.TChan.TChan @ Main.Message ipv5 ipv7
                    } in
                    let {
                      ipv11 :: GHC.Conc.Sync.TVar [GHC.Types.Int] {- Strictness: m -}
                      = GHC.Conc.Sync.TVar @ [GHC.Types.Int] ipv9
                    } in
                    let {
                      client :: Main.Client {- Strictness: m -}
                      = Main.Client w w1 w2 w3 ipv10 ipv11
                    } in
                    case GHC.Prim.writeTVar#
                           @ GHC.Prim.RealWorld
                           @ (Data.Map.Base.Map GHC.Types.Int Main.Client)
                           ww
                           (case w of ww1 { GHC.Types.I# ww2 ->
                            Main.$w$sgo1 @ Main.Client ww2 client ipv1 })
                           ipv8 of s2# { DEFAULT ->
                    case Main.$wbroadcast
                           ww
                           Main.checkAddRoom3
                           (Main.Notice
                              (case w of ww2 { GHC.Types.I# ww3 ->
                               case GHC.Show.$wshowSignedInt
                                      0#
                                      ww3
                                      (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                               GHC.Base.++
                                 @ GHC.Types.Char
                                 (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                                 Main.checkAddRoom2 } }))
                           s2# of ds5 { (#,#) ipv12 ipv13 ->
                    (# ipv12, client #) } } } } } } })
                   w4) -}
95868072696441a88bb13a4992dd4001
  $whandleMessage ::
    Main.Server
    -> GHC.Types.Int
    -> GHC.IO.Handle.Types.Handle
    -> Control.Concurrent.STM.TChan.TChan Main.Message
    -> GHC.Conc.Sync.TVar [GHC.Types.Int]
    -> Main.Message
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 7,
     Strictness: <L,1*U(1*U(U),A)><L,1*U(U)><L,U><L,1*U(A,U)><L,U(U)><S,1*U><S,U>,
     Inline: [0],
     Unfolding: (\ (w :: Main.Server)
                   (ww :: GHC.Types.Int)
                   (ww1 :: GHC.IO.Handle.Types.Handle)
                   (ww2 :: Control.Concurrent.STM.TChan.TChan Main.Message)
                   (ww3 :: GHC.Conc.Sync.TVar [GHC.Types.Int])
                   (w1 :: Main.Message)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w1 of wild {
                   Main.Notice msg
                   -> case GHC.IO.Handle.Text.hPutStr2
                             ww1
                             (GHC.CString.unpackAppendCString# "*** "# msg)
                             GHC.Types.True
                             w2 of ds1 { (#,#) ipv ipv1 ->
                      (# ipv, GHC.Types.True #) }
                   Main.Broadcast msg
                   -> case GHC.IO.Handle.Text.hPutStr2
                             ww1
                             msg
                             GHC.Types.True
                             w2 of ds1 { (#,#) ipv ipv1 ->
                      (# ipv, GHC.Types.True #) }
                   Main.Command msg
                   -> case Data.OldList.words msg of wild1 {
                        [] -> (# w2, GHC.Types.True #)
                        : ds a
                        -> case GHC.Base.eqString ds Main.handleMessage3 of wild2 {
                             GHC.Types.False
                             -> let {
                                  $wfail :: GHC.Prim.State# GHC.Prim.RealWorld
                                            -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                  GHC.Types.Bool #)
                                    {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                                  = \ (w3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                    case ds of wild3 {
                                      [] -> (# w3, GHC.Types.True #)
                                      : ds1 ds2
                                      -> case ds1 of wild4 { GHC.Types.C# ds3 ->
                                         case ds3 of ds4 {
                                           DEFAULT -> (# w3, GHC.Types.True #)
                                           '/'#
                                           -> case GHC.IO.Handle.Text.hPutStr2
                                                     ww1
                                                     (GHC.CString.unpackAppendCString#
                                                        "Unrecognised command: "#
                                                        msg)
                                                     GHC.Types.True
                                                     w3 of ds5 { (#,#) ipv ipv1 ->
                                              (# ipv, GHC.Types.True #) } } } }
                                } in
                                case GHC.Base.eqString ds Main.handleMessage2 of wild3 {
                                  GHC.Types.False -> $wfail w2
                                  GHC.Types.True
                                  -> case a of wild4 {
                                       [] -> (# w2, GHC.Types.False #) : ipv ipv1 -> $wfail w2 } }
                             GHC.Types.True -> Main.$wjoinChatroom w ww ww2 ww3 msg w2 } } }) -}
41deaa5e1192fb6fa6b4c8d406d0afbb
  $wjoinChatroom ::
    Main.Server
    -> GHC.Types.Int
    -> Control.Concurrent.STM.TChan.TChan Main.Message
    -> GHC.Conc.Sync.TVar [GHC.Types.Int]
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 6,
     Strictness: <L,1*U(1*U(U),A)><L,1*U(U)><L,1*U(A,U)><L,U(U)><S,1*U><S,U>,
     Inline: [0] -}
f119428ebe23ae2c21d71af212497fdf
  $wmainLoop ::
    Main.Server
    -> Foreign.C.Types.CInt
    -> Network.Socket.Types.Family
    -> Network.Socket.Types.SocketType
    -> Network.Socket.Types.ProtocolNumber
    -> GHC.Prim.MVar#
         GHC.Prim.RealWorld Network.Socket.Types.SocketStatus
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 8,
     Strictness: <L,U(U(U),A)><L,U(U)><S,U><L,U><L,U(U)><S,U><L,U(U)><S,U>,
     Inline: [0] -}
1aa95f8ee768cb4214a0a8415a890726
  $wpoly_go10 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map GHC.Types.Int a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0] -}
996627377f035d3ec45e4d5756fd38ee
  $wremoveClient ::
    GHC.Prim.TVar#
      GHC.Prim.RealWorld (Data.Map.Base.Map GHC.Types.Int Main.Client)
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <S,U><L,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.TVar#
                            GHC.Prim.RealWorld (Data.Map.Base.Map GHC.Types.Int Main.Client))
                   (ww1 :: GHC.Prim.Int#)
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 GHC.Prim.atomically#
                   @ ()
                   (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case GHC.Prim.readTVar#
                           @ GHC.Prim.RealWorld
                           @ (Data.Map.Base.Map GHC.Types.Int Main.Client)
                           ww
                           s of ds1 { (#,#) ipv ipv1 ->
                    case Main.$w$sgo10 @ Main.Client ww1 ipv1 of vx { DEFAULT ->
                    case GHC.Prim.writeTVar#
                           @ GHC.Prim.RealWorld
                           @ (Data.Map.Base.Map GHC.Types.Int Main.Client)
                           ww
                           vx
                           ipv of s2# { DEFAULT ->
                    Main.$wbroadcast
                      ww
                      Main.checkAddRoom3
                      (Main.Notice
                         (case GHC.Show.$wshowSignedInt
                                 0#
                                 ww1
                                 (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                            Main.removeClient2 }))
                      s2# } } })
                   w) -}
d4a5a12189889484ee5598644a7ef632
  $wrunClient ::
    GHC.Conc.Sync.TVar (Data.Map.Base.Map GHC.Types.Int Main.Client)
    -> GHC.Types.Int
    -> GHC.IO.Handle.Types.Handle
    -> Control.Concurrent.STM.TChan.TChan Main.Message
    -> GHC.Conc.Sync.TVar [GHC.Types.Int]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6,
     Strictness: <L,U(U)><L,U(U)><L,U><L,U(U,U)><L,U(U)><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Conc.Sync.TVar
                            (Data.Map.Base.Map GHC.Types.Int Main.Client))
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: GHC.IO.Handle.Types.Handle)
                   (ww3 :: Control.Concurrent.STM.TChan.TChan Main.Message)
                   (ww4 :: GHC.Conc.Sync.TVar [GHC.Types.Int])
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Control.Concurrent.Async.$fAlternativeConcurrently7
                        @ ()
                        @ GHC.Prim.Any
                        @ (Data.Either.Either () GHC.Prim.Any)
                        (letrec {
                           server :: GHC.Prim.State# GHC.Prim.RealWorld
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                             {- Arity: 1, Strictness: <S,U> -}
                           = \ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                             case GHC.Prim.atomically#
                                    @ (GHC.Types.IO ())
                                    (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                     case ww3 of ww5 { Control.Concurrent.STM.TChan.TChan ww6 ww7 ->
                                     case GHC.Prim.readTVar#
                                            @ GHC.Prim.RealWorld
                                            @ (Control.Concurrent.STM.TChan.TVarList Main.Message)
                                            ww6
                                            s1 of ds1 { (#,#) ipv ipv1 ->
                                     case ipv1 of wild { GHC.Conc.Sync.TVar tvar# ->
                                     case GHC.Prim.readTVar#
                                            @ GHC.Prim.RealWorld
                                            @ (Control.Concurrent.STM.TChan.TList Main.Message)
                                            tvar#
                                            ipv of ds2 { (#,#) ipv2 ipv3 ->
                                     case ipv3 of wild1 {
                                       Control.Concurrent.STM.TChan.TNil
                                       -> case GHC.Prim.retry# @ Main.Message ipv2
                                          ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                    GHC.Types.IO () #)
                                          of {}
                                       Control.Concurrent.STM.TChan.TCons a1 dt
                                       -> case GHC.Prim.writeTVar#
                                                 @ GHC.Prim.RealWorld
                                                 @ (Control.Concurrent.STM.TChan.TVarList
                                                      Main.Message)
                                                 ww6
                                                 (GHC.Conc.Sync.TVar
                                                    @ (Control.Concurrent.STM.TChan.TList
                                                         Main.Message)
                                                    dt)
                                                 ipv2 of s2# { DEFAULT ->
                                          (# s2#,
                                             (\ (s2 :: GHC.Prim.State#
                                                         GHC.Prim.RealWorld)[OneShot] ->
                                              case Main.$whandleMessage
                                                     (Main.Server ww Main.runClient2)
                                                     ww1
                                                     ww2
                                                     ww5
                                                     ww4
                                                     a1
                                                     s2 of ds4 { (#,#) ipv4 ipv5 ->
                                              case ipv5 of wild2 {
                                                GHC.Types.False -> (# ipv4, GHC.Tuple.() #)
                                                GHC.Types.True -> server ipv4 } })
                                               `cast`
                                             (Sym (GHC.Types.N:IO[0] <()>_R)) #) } } } } } })
                                    s of ds1 { (#,#) ipv ipv1 ->
                             ipv1 `cast` (GHC.Types.N:IO[0] <()>_R) ipv }
                         } in
                         server `cast` (Sym (GHC.Types.N:IO[0] <()>_R)))
                        (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         letrec {
                           a' :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Any #)
                             {- Arity: 1, Strictness: <S,U> -}
                           = \ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                             case Main.getUserLines2
                                    ww2
                                    (GHC.Types.[] @ GHC.Types.Char)
                                    s of ds1 { (#,#) ipv ipv1 ->
                             case GHC.Prim.atomically#
                                    @ ()
                                    (\ (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                     case ww3 of wild { Control.Concurrent.STM.TChan.TChan dt dt1 ->
                                     case GHC.Prim.readTVar#
                                            @ GHC.Prim.RealWorld
                                            @ (Control.Concurrent.STM.TChan.TVarList Main.Message)
                                            dt1
                                            eta1 of ds2 { (#,#) ipv2 ipv3 ->
                                     case GHC.Prim.newTVar#
                                            @ (Control.Concurrent.STM.TChan.TList Main.Message)
                                            @ GHC.Prim.RealWorld
                                            (Control.Concurrent.STM.TChan.TNil @ Main.Message)
                                            ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                                     case ipv3 of wild1 { GHC.Conc.Sync.TVar tvar# ->
                                     case GHC.Prim.writeTVar#
                                            @ GHC.Prim.RealWorld
                                            @ (Control.Concurrent.STM.TChan.TList Main.Message)
                                            tvar#
                                            (Control.Concurrent.STM.TChan.TCons
                                               @ Main.Message
                                               (Main.Command ipv1)
                                               ipv5)
                                            ipv4 of s2# { DEFAULT ->
                                     case GHC.Prim.writeTVar#
                                            @ GHC.Prim.RealWorld
                                            @ (Control.Concurrent.STM.TChan.TVarList Main.Message)
                                            dt1
                                            (GHC.Conc.Sync.TVar
                                               @ (Control.Concurrent.STM.TChan.TList Main.Message)
                                               ipv5)
                                            s2# of s2#1 { DEFAULT ->
                                     (# s2#1, GHC.Tuple.() #) } } } } } })
                                    ipv of ds2 { (#,#) ipv2 ipv3 ->
                             a' ipv2 } }
                         } in
                         a' eta)
                          `cast`
                        (Sym (GHC.Types.N:IO[0] <GHC.Prim.Any>_R))
                        (Control.Concurrent.Async.$fAlternativeConcurrently2
                           @ ()
                           @ GHC.Prim.Any)
                          `cast`
                        (<GHC.Types.IO
                            (Data.Either.Either
                               GHC.Exception.SomeException
                               (Data.Either.Either () GHC.Prim.Any))>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <Data.Either.Either () GHC.Prim.Any>_R))
                        w of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Tuple.() #) }) -}
58b810e36fb53980413e0792679674ae
  $wsendToName ::
    GHC.Prim.TVar#
      GHC.Prim.RealWorld (Data.Map.Base.Map GHC.Types.Int Main.Client)
    -> GHC.Prim.Int#
    -> Main.Message
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 4, HasNoCafRefs, Strictness: <S,U><L,U><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.TVar#
                            GHC.Prim.RealWorld (Data.Map.Base.Map GHC.Types.Int Main.Client))
                   (ww1 :: GHC.Prim.Int#)
                   (w :: Main.Message)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.readTVar#
                        @ GHC.Prim.RealWorld
                        @ (Data.Map.Base.Map GHC.Types.Int Main.Client)
                        ww
                        w1 of ds1 { (#,#) ipv ipv1 ->
                 case Main.$wpoly_go10 @ Main.Client ww1 ipv1 of wild {
                   GHC.Base.Nothing -> (# ipv, GHC.Types.False #)
                   GHC.Base.Just client
                   -> case client of wild1 { Main.Client ds ds2 ds3 ds4 ds5 ds6 ->
                      case ds5 of wild2 { Control.Concurrent.STM.TChan.TChan dt dt1 ->
                      case GHC.Prim.readTVar#
                             @ GHC.Prim.RealWorld
                             @ (Control.Concurrent.STM.TChan.TVarList Main.Message)
                             dt1
                             ipv of ds7 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.newTVar#
                             @ (Control.Concurrent.STM.TChan.TList Main.Message)
                             @ GHC.Prim.RealWorld
                             (Control.Concurrent.STM.TChan.TNil @ Main.Message)
                             ipv2 of ds8 { (#,#) ipv4 ipv5 ->
                      case ipv3 of wild3 { GHC.Conc.Sync.TVar tvar# ->
                      case GHC.Prim.writeTVar#
                             @ GHC.Prim.RealWorld
                             @ (Control.Concurrent.STM.TChan.TList Main.Message)
                             tvar#
                             (Control.Concurrent.STM.TChan.TCons @ Main.Message w ipv5)
                             ipv4 of s2# { DEFAULT ->
                      case GHC.Prim.writeTVar#
                             @ GHC.Prim.RealWorld
                             @ (Control.Concurrent.STM.TChan.TVarList Main.Message)
                             dt1
                             (GHC.Conc.Sync.TVar
                                @ (Control.Concurrent.STM.TChan.TList Main.Message)
                                ipv5)
                             s2# of s2#1 { DEFAULT ->
                      (# s2#1, GHC.Types.True #) } } } } } } } } }) -}
304c5cf5b3cd6f7d58d9bcb59aeb4274
  $wsendToRoom ::
    GHC.Types.Int
    -> Control.Concurrent.STM.TChan.TChan Main.Message
    -> GHC.Prim.TVar# GHC.Prim.RealWorld [GHC.Types.Int]
    -> Main.Message
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U><L,1*U(A,U)><S,U><L,U><S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Types.Int)
                   (ww :: Control.Concurrent.STM.TChan.TChan Main.Message)
                   (ww1 :: GHC.Prim.TVar# GHC.Prim.RealWorld [GHC.Types.Int])
                   (w1 :: Main.Message)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.readTVar#
                        @ GHC.Prim.RealWorld
                        @ [GHC.Types.Int]
                        ww1
                        w2 of ds1 { (#,#) ipv ipv1 ->
                 case GHC.List.elem
                        @ GHC.Types.Int
                        GHC.Classes.$fEqInt
                        w
                        ipv1 of wild {
                   GHC.Types.False -> (# ipv, GHC.Tuple.() #)
                   GHC.Types.True
                   -> Control.Concurrent.STM.TChan.writeTChan1
                        @ Main.Message
                        ww
                        w1
                        ipv } }) -}
21caf54b4d362f1617bf8ef69e61cc4d
  $wtalk ::
    GHC.Base.String
    -> Network.Socket.Types.PortNumber
    -> GHC.IO.Handle.Types.Handle
    -> GHC.Conc.Sync.TVar (Data.Map.Base.Map GHC.Types.Int Main.Client)
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6, Strictness: <L,U><L,U><S,U><L,U(U)><L,U(U)><S,U>,
     Inline: [0] -}
e96a0d7b5734fc3784e400807fcc3a5c
  data Client
    = Client {clientId :: GHC.Types.Int,
              clientIP :: GHC.Base.String,
              clientPort :: Network.Socket.Types.PortNumber,
              clientHandle :: GHC.IO.Handle.Types.Handle,
              clientSendChan :: Control.Concurrent.STM.TChan.TChan Main.Message,
              clientRoomRefs :: GHC.Conc.Sync.TVar [GHC.Types.Int]}
fbed4067a26e1dec37a31b9eba546428
  type ClientName = GHC.Base.String
589b636ced28e30aac61048380852a10
  data Message
    = Notice GHC.Base.String
    | Broadcast GHC.Base.String
    | Command GHC.Base.String
cb13d7f018fcb8b556db730c8275a3f3
  type RoomName = GHC.Base.String
c04b3470e04023a8860e2b8cd19af1ea
  type RoomRef = GHC.Types.Int
e663d426801893d3a5a026f0cd4034ec
  data Server
    = Server {clients :: GHC.Conc.Sync.TVar
                           (Data.Map.Base.Map GHC.Types.Int Main.Client),
              rooms :: GHC.Conc.Sync.TVar
                         (Data.Map.Base.Map Main.RoomName Main.RoomRef)}
5626056787a53ae1ed043e251688888f
  broadcast ::
    Main.Server
    -> GHC.Types.Int -> Main.Message -> GHC.Conc.Sync.STM ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),A)><L,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.broadcast1
                  `cast`
                (<Main.Server>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <Main.Message>_R
                 ->_R Sym (GHC.Conc.Sync.N:STM[0] <()>_R)) -}
44ab0d0520436873024706c8bdfaeedc
  broadcast1 ::
    Main.Server
    -> GHC.Types.Int
    -> Main.Message
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),A)><L,U><L,U><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Main.Server)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Main.Message)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { Main.Server ww1 ww2 ->
                 case ww1 of ww3 { GHC.Conc.Sync.TVar ww4 ->
                 Main.$wbroadcast ww4 w1 w2 w3 } }) -}
45324ee44e058343a8d08de9eb117f7e
  broadcast2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s, GHC.Tuple.() #)) -}
c169a804ee4c1b19e566e7c4a2f9c390
  checkAddRoom ::
    Main.Server
    -> GHC.Types.Int
    -> GHC.Base.String
    -> Network.Socket.Types.PortNumber
    -> GHC.IO.Handle.Types.Handle
    -> GHC.Types.IO Main.Client
  {- Arity: 6,
     Strictness: <S(S(S)L),1*U(U(U),A)><L,U(U)><L,U><L,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.checkAddRoom1
                  `cast`
                (<Main.Server>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <Network.Socket.Types.PortNumber>_R
                 ->_R <GHC.IO.Handle.Types.Handle>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Main.Client>_R)) -}
1f05d83288dc53a613ade3bc840ebc0a
  checkAddRoom1 ::
    Main.Server
    -> GHC.Types.Int
    -> GHC.Base.String
    -> Network.Socket.Types.PortNumber
    -> GHC.IO.Handle.Types.Handle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.Client #)
  {- Arity: 6,
     Strictness: <S(S(S)L),1*U(U(U),A)><L,U(U)><L,U><L,U><L,U><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ (w :: Main.Server)
                   (w1 :: GHC.Types.Int)
                   (w2 :: GHC.Base.String)
                   (w3 :: Network.Socket.Types.PortNumber)
                   (w4 :: GHC.IO.Handle.Types.Handle)
                   (w5 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { Main.Server ww1 ww2 ->
                 case ww1 of ww3 { GHC.Conc.Sync.TVar ww4 ->
                 Main.$wcheckAddRoom ww4 w1 w2 w3 w4 w5 } }) -}
b45256b871a9f2bf32e30764c8569e9f
  checkAddRoom2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# " has connected"#) -}
416be5bbb12c1c1a47f3066c6325f641
  checkAddRoom3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
c11fbce884d313b968a24412db069092
  clientHandle :: Main.Client -> GHC.IO.Handle.Types.Handle
  RecSel Left Main.Client
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLL),1*U(A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Client) ->
                 case ds of wild { Main.Client ds1 ds2 ds3 ds4 ds5 ds6 -> ds4 }) -}
2e90875f50fc4427aafcd85d46d881cc
  clientIP :: Main.Client -> GHC.Base.String
  RecSel Left Main.Client
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLL),1*U(A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Client) ->
                 case ds of wild { Main.Client ds1 ds2 ds3 ds4 ds5 ds6 -> ds2 }) -}
1b20dad6c7d7f2c8d53bd5303ec03078
  clientId :: Main.Client -> GHC.Types.Int
  RecSel Left Main.Client
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLL),1*U(1*U(U),A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Client) ->
                 case ds of wild { Main.Client ds1 ds2 ds3 ds4 ds5 ds6 -> ds1 }) -}
f695fd0054e4d59b06991cf85c70f2ed
  clientPort :: Main.Client -> Network.Socket.Types.PortNumber
  RecSel Left Main.Client
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLL),1*U(A,A,1*U(U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Client) ->
                 case ds of wild { Main.Client ds1 ds2 ds3 ds4 ds5 ds6 -> ds3 }) -}
d2c092f179915b7f251f351553458335
  clientRoomRefs :: Main.Client -> GHC.Conc.Sync.TVar [GHC.Types.Int]
  RecSel Left Main.Client
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLS),1*U(A,A,A,A,A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Client) ->
                 case ds of wild { Main.Client ds1 ds2 ds3 ds4 ds5 ds6 -> ds6 }) -}
b73374eef2e3efe584f4778c785fa526
  clientSendChan ::
    Main.Client -> Control.Concurrent.STM.TChan.TChan Main.Message
  RecSel Left Main.Client
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSL),1*U(A,A,A,A,1*U(U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Client) ->
                 case ds of wild { Main.Client ds1 ds2 ds3 ds4 ds5 ds6 -> ds5 }) -}
07dddd226c1031e1ff818d56a108c13f
  clients ::
    Main.Server
    -> GHC.Conc.Sync.TVar (Data.Map.Base.Map GHC.Types.Int Main.Client)
  RecSel Left Main.Server
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Server) ->
                 case ds of wild { Main.Server ds1 ds2 -> ds1 }) -}
37ebdf4525ff175f31659559b3d0b0b5
  getUserLines ::
    GHC.IO.Handle.Types.Handle -> GHC.Types.IO GHC.Base.String
  {- Arity: 2, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.getUserLines1
                  `cast`
                (<GHC.IO.Handle.Types.Handle>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R)) -}
390413715b7dfc00c831c5071e0d5225
  getUserLines1 ::
    GHC.IO.Handle.Types.Handle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 2, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (hdl :: GHC.IO.Handle.Types.Handle)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.getUserLines2 hdl (GHC.Types.[] @ GHC.Types.Char) eta) -}
be7fcbf0c17688d6d0cb5d0f4b1abe5d
  getUserLines2 ::
    GHC.IO.Handle.Types.Handle
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 3, Strictness: <S,U><L,U><S,U> -}
bf2e359654be6947c54d5cc7c1a796d1
  go ::
    GHC.IO.Handle.Types.Handle
    -> GHC.Base.String -> GHC.Types.IO GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.getUserLines2
                  `cast`
                (<GHC.IO.Handle.Types.Handle>_R
                 ->_R <GHC.Base.String>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R)) -}
a244a45f97e399f37df3c37fff783a99
  handleMessage ::
    Main.Server
    -> Main.Client -> Main.Message -> GHC.Types.IO GHC.Types.Bool
  {- Arity: 4,
     Strictness: <L,1*U(1*U(U),A)><S,1*U(1*U(U),A,A,U,1*U(A,U),U(U))><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.handleMessage1
                  `cast`
                (<Main.Server>_R
                 ->_R <Main.Client>_R
                 ->_R <Main.Message>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Bool>_R)) -}
9eb15bd147566b70284b9cc89271e67d
  handleMessage1 ::
    Main.Server
    -> Main.Client
    -> Main.Message
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 4,
     Strictness: <L,1*U(1*U(U),A)><S,1*U(1*U(U),A,A,U,1*U(A,U),U(U))><S,1*U><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Main.Server)
                   (w1 :: Main.Client)
                   (w2 :: Main.Message)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w1 of ww { Main.Client ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$whandleMessage w ww1 ww4 ww5 ww6 w2 w3 }) -}
3d0162abefc370d420a912bca015e963
  handleMessage2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "quit"#) -}
98139a6879a4e18365e9da2043a7c3af
  handleMessage3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "JOIN_CHATROOM:"#) -}
c0c0246b16136619dedbdb6f4527335d
  joinChatroom ::
    Main.Server
    -> Main.Client -> GHC.Base.String -> GHC.Types.IO GHC.Types.Bool
  {- Arity: 4,
     Strictness: <L,1*U(1*U(U),A)><S,1*U(1*U(U),A,A,A,1*U(A,U),U(U))><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.joinChatroom1
                  `cast`
                (<Main.Server>_R
                 ->_R <Main.Client>_R
                 ->_R <GHC.Base.String>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Bool>_R)) -}
736570184fc29568f6ce891ac1858f4c
  joinChatroom1 ::
    Main.Server
    -> Main.Client
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 4,
     Strictness: <L,1*U(1*U(U),A)><S,1*U(1*U(U),A,A,A,1*U(A,U),U(U))><S,1*U><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Main.Server)
                   (w1 :: Main.Client)
                   (w2 :: GHC.Base.String)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w1 of ww { Main.Client ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$wjoinChatroom w ww1 ww5 ww6 w2 w3 }) -}
f1fb066eaa0c539038878525fd8dc4a2
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
8b5404373df079762603a7dd2bb2c1f3
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newTVar#
                        @ (Data.Map.Base.Map GHC.Types.Int Main.Client)
                        @ GHC.Prim.RealWorld
                        (Data.Map.Base.Tip @ GHC.Types.Int @ Main.Client)
                        s of ds { (#,#) ipv ipv1 ->
                 case GHC.Prim.newTVar#
                        @ (Data.Map.Base.Map Main.RoomName Main.RoomRef)
                        @ GHC.Prim.RealWorld
                        (Data.Map.Base.Tip @ Main.RoomName @ Main.RoomRef)
                        ipv of ds1 { (#,#) ipv2 ipv3 ->
                 case System.Environment.getArgs1 ipv2 of ds2 { (#,#) ipv4 ipv5 ->
                 case Network.listenOn1
                        (Network.PortNumber
                           (case Text.Read.readEither6
                                   @ GHC.Integer.Type.Integer
                                   (Text.ParserCombinators.ReadP.run
                                      @ GHC.Integer.Type.Integer
                                      Main.main3
                                      (case ipv5 of wild {
                                         [] -> GHC.List.badHead @ GHC.Base.String
                                         : x ds3 -> x })) of wild {
                              []
                              -> case GHC.Err.error
                                        @ 'GHC.Types.PtrRepLifted
                                        @ GHC.Integer.Type.Integer
                                        GHC.Err.errorWithoutStackTrace_wild1
                                          `cast`
                                        (Sym (GHC.Classes.N:IP[0]
                                                  <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                                        Text.Read.readEither4
                                 ret_ty Network.Socket.Types.PortNumber
                                 of {}
                              : x ds3
                              -> case ds3 of wild1 {
                                   []
                                   -> case GHC.Integer.Type.integerToInt x of wild2 { DEFAULT ->
                                      case {__pkg_ccall network-2.6.3.2@network-2.6.3.2-IsLM4TXcLoRI0fmmBYVyQz htons GHC.Prim.Word#
                                                                                                                     -> GHC.Prim.State#
                                                                                                                          GHC.Prim.RealWorld
                                                                                                                     -> (# GHC.Prim.State#
                                                                                                                             GHC.Prim.RealWorld,
                                                                                                                           GHC.Prim.Word# #)}
                                             (GHC.Prim.narrow16Word# (GHC.Prim.int2Word# wild2))
                                             GHC.Prim.realWorld# of wild3 { (#,#) ds4 ds5 ->
                                      (GHC.Word.W16# (GHC.Prim.narrow16Word# ds5))
                                        `cast`
                                      (Sym (Network.Socket.Types.N:PortNumber[0])) } }
                                   : ipv6 ipv7
                                   -> case GHC.Err.error
                                             @ 'GHC.Types.PtrRepLifted
                                             @ GHC.Integer.Type.Integer
                                             GHC.Err.errorWithoutStackTrace_wild1
                                               `cast`
                                             (Sym (GHC.Classes.N:IP[0]
                                                       <"callStack">_N
                                                       <GHC.Stack.Types.CallStack>_N))
                                             Text.Read.readEither2
                                      ret_ty Network.Socket.Types.PortNumber
                                      of {} } }))
                        ipv4 of ds3 { (#,#) ipv6 ipv7 ->
                 let {
                   a1 :: [GHC.Types.Char]
                   = case ipv5 of wild {
                       [] -> GHC.List.badHead @ GHC.Base.String : x ds4 -> x }
                 } in
                 case Text.Printf.$fPrintfTypeIO1
                        @ ()
                        Main.$sprintf3
                          `cast`
                        (Sym (Data.Type.Equality.N:~[0] <*>_N) <()>_N <()>_N)
                        Main.main2
                        (GHC.Types.:
                           @ (Text.Printf.ModifierParser, Text.Printf.FieldFormatter)
                           (Main.$s$fPrintfArg[]_$s$fPrintfArg[]_$cparseFormat a1,
                            \ (w2 :: Text.Printf.FieldFormat) ->
                            case w2 of ww { Text.Printf.FieldFormat ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                            case ww7 of ww8 { GHC.Types.C# ww9 ->
                            Text.Printf.$wformatString
                              @ GHC.Types.Char
                              Text.Printf.$fIsCharChar
                              a1
                              ww1
                              ww2
                              ww3
                              ww9 } })
                           (GHC.Types.[] @ Text.Printf.UPrintf))
                        ipv6 of ds4 { (#,#) ipv8 ipv9 ->
                 case ipv7 of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case ww5 of ww6 { GHC.MVar.MVar ww7 ->
                 Main.$wmainLoop
                   (Main.Server
                      (GHC.Conc.Sync.TVar
                         @ (Data.Map.Base.Map GHC.Types.Int Main.Client)
                         ipv1)
                      (GHC.Conc.Sync.TVar
                         @ (Data.Map.Base.Map Main.RoomName Main.RoomRef)
                         ipv3))
                   ww1
                   ww2
                   ww3
                   ww4
                   ww7
                   Main.checkAddRoom3
                   ipv8 } } } } } } }) -}
e54d6c66092c2b931f6c17951df0cf42
  main2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Listening on port %s\n"#) -}
5aa9dc1b971b34e053dcb3ac94e33fff
  main3 :: Text.ParserCombinators.ReadP.P GHC.Integer.Type.Integer
  {- Unfolding: (GHC.Read.$fReadInteger3
                   GHC.Read.$fReadInteger_$sconvertInt
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ GHC.Integer.Type.Integer
                   (Text.Read.readEither5 @ GHC.Integer.Type.Integer)) -}
636a9f802a5fb103f09bd6e5fd9d34a2
  main4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
98abbdf155078318569f87468c745b27
  mainLoop ::
    Main.Server
    -> Network.Socket.Types.Socket -> GHC.Types.Int -> GHC.Types.IO ()
  {- Arity: 4,
     Strictness: <L,U(U(U),A)><S(LSLLS(S)),1*U(U(U),U,U,U(U),U(U))><L,U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.mainLoop1
                  `cast`
                (<Main.Server>_R
                 ->_R <Network.Socket.Types.Socket>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
4e0353d0e666a4d0b1cc3e28629bcf0a
  mainLoop1 ::
    Main.Server
    -> Network.Socket.Types.Socket
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <L,U(U(U),A)><S(LSLLS(S)),1*U(U(U),U,U,U(U),U(U))><L,U(U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Main.Server)
                   (w1 :: Network.Socket.Types.Socket)
                   (w2 :: GHC.Types.Int)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w1 of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case ww5 of ww6 { GHC.MVar.MVar ww7 ->
                 Main.$wmainLoop w ww1 ww2 ww3 ww4 ww7 w2 w3 } }) -}
1a1f4bd80078aa87c04eac729f0434c2
  newClient ::
    GHC.Types.Int
    -> GHC.Base.String
    -> Network.Socket.Types.PortNumber
    -> GHC.IO.Handle.Types.Handle
    -> GHC.Conc.Sync.STM Main.Client
  {- Arity: 5, HasNoCafRefs, Strictness: <L,U><L,U><L,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.newClient1
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <Network.Socket.Types.PortNumber>_R
                 ->_R <GHC.IO.Handle.Types.Handle>_R
                 ->_R Sym (GHC.Conc.Sync.N:STM[0] <Main.Client>_R)) -}
abe67fc0d25df0702966a8f009df867b
  newClient1 ::
    GHC.Types.Int
    -> GHC.Base.String
    -> Network.Socket.Types.PortNumber
    -> GHC.IO.Handle.Types.Handle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.Client #)
  {- Arity: 5, HasNoCafRefs, Strictness: <L,U><L,U><L,U><L,U><S,U>,
     Unfolding: InlineRule (5, True, False)
                (\ (id :: GHC.Types.Int)
                   (host :: GHC.Base.String)
                   (port :: Network.Socket.Types.PortNumber)
                   (handle :: GHC.IO.Handle.Types.Handle)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newTVar#
                        @ (Control.Concurrent.STM.TChan.TList Main.Message)
                        @ GHC.Prim.RealWorld
                        (Control.Concurrent.STM.TChan.TNil @ Main.Message)
                        eta of ds { (#,#) ipv ipv1 ->
                 let {
                   hole :: GHC.Conc.Sync.TVar
                             (Control.Concurrent.STM.TChan.TList Main.Message)
                   = GHC.Conc.Sync.TVar
                       @ (Control.Concurrent.STM.TChan.TList Main.Message)
                       ipv1
                 } in
                 case GHC.Prim.newTVar#
                        @ (GHC.Conc.Sync.TVar
                             (Control.Concurrent.STM.TChan.TList Main.Message))
                        @ GHC.Prim.RealWorld
                        hole
                        ipv of ds1 { (#,#) ipv2 ipv3 ->
                 case GHC.Prim.newTVar#
                        @ (GHC.Conc.Sync.TVar
                             (Control.Concurrent.STM.TChan.TList Main.Message))
                        @ GHC.Prim.RealWorld
                        hole
                        ipv2 of ds2 { (#,#) ipv4 ipv5 ->
                 case GHC.Prim.newTVar#
                        @ [GHC.Types.Int]
                        @ GHC.Prim.RealWorld
                        (GHC.Types.[] @ GHC.Types.Int)
                        ipv4 of ds4 { (#,#) ipv7 ipv8 ->
                 (# ipv7,
                    Main.Client
                      id
                      host
                      port
                      handle
                      (Control.Concurrent.STM.TChan.TChan @ Main.Message ipv3 ipv5)
                      (GHC.Conc.Sync.TVar @ [GHC.Types.Int] ipv8) #) } } } }) -}
cad9bd707970e42181ef51b40e3efd77
  newServer :: GHC.Types.IO Main.Server
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.newServer1 `cast` (Sym (GHC.Types.N:IO[0] <Main.Server>_R)) -}
9380dcaaf6c2660210215a2e9dbfd70c
  newServer1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.Server #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newTVar#
                        @ (Data.Map.Base.Map GHC.Types.Int Main.Client)
                        @ GHC.Prim.RealWorld
                        (Data.Map.Base.Tip @ GHC.Types.Int @ Main.Client)
                        s of ds { (#,#) ipv ipv1 ->
                 case GHC.Prim.newTVar#
                        @ (Data.Map.Base.Map Main.RoomName Main.RoomRef)
                        @ GHC.Prim.RealWorld
                        (Data.Map.Base.Tip @ Main.RoomName @ Main.RoomRef)
                        ipv of ds1 { (#,#) ipv2 ipv3 ->
                 (# ipv2,
                    Main.Server
                      (GHC.Conc.Sync.TVar
                         @ (Data.Map.Base.Map GHC.Types.Int Main.Client)
                         ipv1)
                      (GHC.Conc.Sync.TVar
                         @ (Data.Map.Base.Map Main.RoomName Main.RoomRef)
                         ipv3) #) } }) -}
03dd9f34884ec0d6f6f36a062461df77
  removeClient :: Main.Server -> GHC.Types.Int -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <S(S(S)L),1*U(U(U),A)><S,U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.removeClient1
                  `cast`
                (<Main.Server>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
be217b0b87d76a1633d4bacc3ac784d0
  removeClient1 ::
    Main.Server
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <S(S(S)L),1*U(U(U),A)><S,U(U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Main.Server)
                   (w1 :: GHC.Types.Int)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { Main.Server ww1 ww2 ->
                 case ww1 of ww3 { GHC.Conc.Sync.TVar ww4 ->
                 case w1 of ww5 { GHC.Types.I# ww6 ->
                 Main.$wremoveClient ww4 ww6 w2 } } }) -}
792e4ea41d4149ff1ecd5bfbe10f602c
  removeClient2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# " has disconnected"#) -}
0fcded8920f52cb395c2f973be8b2cfd
  rooms ::
    Main.Server
    -> GHC.Conc.Sync.TVar
         (Data.Map.Base.Map Main.RoomName Main.RoomRef)
  RecSel Left Main.Server
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Server) ->
                 case ds of wild { Main.Server ds1 ds2 -> ds2 }) -}
e51d0273fd5afad9288e5bba92b83bf3
  runClient :: Main.Server -> Main.Client -> GHC.Types.IO ()
  {- Arity: 3,
     Strictness: <S,1*U(U(U),A)><S,1*U(U(U),A,A,U,U(U,U),U(U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.runClient1
                  `cast`
                (<Main.Server>_R
                 ->_R <Main.Client>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
dc7fe7ad55aa6e55d0971f9fb73fd315
  runClient1 ::
    Main.Server
    -> Main.Client
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3,
     Strictness: <S,1*U(U(U),A)><S,1*U(U(U),A,A,U,U(U,U),U(U))><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Main.Server)
                   (w1 :: Main.Client)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { Main.Server ww1 ww2 ->
                 case w1 of ww3 { Main.Client ww4 ww5 ww6 ww7 ww8 ww9 ->
                 Main.$wrunClient ww1 ww4 ww7 ww8 ww9 w2 } }) -}
f6f1678adedb5dbf62bd40e00f0293b1
  runClient2 ::
    GHC.Conc.Sync.TVar (Data.Map.Base.Map Main.RoomName Main.RoomRef)
  {- Strictness: x -}
3a6cfe6b07121ea7c1ba2bad5b4a288b
  sendMessage :: Main.Client -> Main.Message -> GHC.Conc.Sync.STM ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLLS(LS)L),1*U(A,A,A,A,1*U(A,U),A)><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.sendMessage1
                  `cast`
                (<Main.Client>_R
                 ->_R <Main.Message>_R
                 ->_R Sym (GHC.Conc.Sync.N:STM[0] <()>_R)) -}
d99d4f256e195ff934b132d8ad14784b
  sendMessage1 ::
    Main.Client
    -> Main.Message
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLLS(LS)L),1*U(A,A,A,A,1*U(A,U),A)><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: Main.Client)
                   (msg :: Main.Message)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds of wild { Main.Client ds1 ds2 ds3 ds4 ds5 ds6 ->
                 Control.Concurrent.STM.TChan.writeTChan1
                   @ Main.Message
                   ds5
                   msg
                   eta }) -}
f44c97300e4eb876b89ac3bdad9b6c31
  sendToName ::
    Main.Server
    -> GHC.Types.Int
    -> Main.Message
    -> GHC.Conc.Sync.STM GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),A)><S,1*U(U)><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.sendToName1
                  `cast`
                (<Main.Server>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <Main.Message>_R
                 ->_R Sym (GHC.Conc.Sync.N:STM[0] <GHC.Types.Bool>_R)) -}
1c94fcf316b1d4bdabcf9a3000d26a40
  sendToName1 ::
    Main.Server
    -> GHC.Types.Int
    -> Main.Message
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),A)><S,1*U(U)><L,U><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Main.Server)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Main.Message)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { Main.Server ww1 ww2 ->
                 case ww1 of ww3 { GHC.Conc.Sync.TVar ww4 ->
                 case w1 of ww5 { GHC.Types.I# ww6 ->
                 Main.$wsendToName ww4 ww6 w2 w3 } } }) -}
0193fc93b5d0cf84df15116fc0de40fe
  sendToRoom ::
    GHC.Types.Int
    -> Main.Client -> Main.Message -> GHC.Conc.Sync.STM ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U><S(LLLLLS(S)),1*U(A,A,A,A,1*U(A,U),1*U(U))><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.sendToRoom1
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R <Main.Client>_R
                 ->_R <Main.Message>_R
                 ->_R Sym (GHC.Conc.Sync.N:STM[0] <()>_R)) -}
88386dcadb5eb87cf6b98108097cb5e9
  sendToRoom1 ::
    GHC.Types.Int
    -> Main.Client
    -> Main.Message
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U><S(LLLLLS(S)),1*U(A,A,A,A,1*U(A,U),1*U(U))><L,U><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.Client)
                   (w2 :: Main.Message)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w1 of ww { Main.Client ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case ww6 of ww7 { GHC.Conc.Sync.TVar ww8 ->
                 Main.$wsendToRoom w ww5 ww8 w2 w3 } }) -}
899e826837980fbb386870918d6fc7b2
  talk ::
    GHC.Base.String
    -> Network.Socket.Types.PortNumber
    -> GHC.IO.Handle.Types.Handle
    -> Main.Server
    -> GHC.Types.Int
    -> GHC.Types.IO ()
  {- Arity: 6,
     Strictness: <L,U><L,U><S,U><S,1*U(U(U),A)><L,U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.talk1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <Network.Socket.Types.PortNumber>_R
                 ->_R <GHC.IO.Handle.Types.Handle>_R
                 ->_R <Main.Server>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
1bd136fbd1625cecaf0119f4a11bf9b3
  talk1 ::
    GHC.Base.String
    -> Network.Socket.Types.PortNumber
    -> GHC.IO.Handle.Types.Handle
    -> Main.Server
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6,
     Strictness: <L,U><L,U><S,U><S,1*U(U(U),A)><L,U(U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ (w :: GHC.Base.String)
                   (w1 :: Network.Socket.Types.PortNumber)
                   (w2 :: GHC.IO.Handle.Types.Handle)
                   (w3 :: Main.Server)
                   (w4 :: GHC.Types.Int)
                   (w5 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w3 of ww { Main.Server ww1 ww2 ->
                 Main.$wtalk w w1 w2 ww1 w4 w5 }) -}
"SPEC/Main $fPrintfArg[]_$cparseFormat @ Char" [ALWAYS] forall ($dIsChar :: Text.Printf.IsChar
                                                                              GHC.Types.Char)
  Text.Printf.$fPrintfArg[]_$cparseFormat @ GHC.Types.Char $dIsChar
  = Main.$s$fPrintfArg[]_$s$fPrintfArg[]_$cparseFormat
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

