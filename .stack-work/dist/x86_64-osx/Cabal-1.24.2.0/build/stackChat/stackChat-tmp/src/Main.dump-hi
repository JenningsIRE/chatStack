
==================== FINAL INTERFACE ====================
2017-10-31 14:04:25.212178 UTC

interface main@main:Main 8002
  interface hash: ad20cfe115b4d6a2fc269a21d3e8dcc7
  ABI hash: d97b8135b42fa0cdc008bb61c31fe53e
  export-list hash: 91a648b2b62686dfe921b6697eca5295
  orphan hash: e3f907cc77bbc0eb7e4f425dad3f8e77
  flag hash: 4a911ef96c2b9d76f64eec71abf04ce6
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.broadcast
  Main.checkAddClient
  Main.handleMessage
  Main.heloText
  Main.kick
  Main.main
  Main.newClient
  Main.newServer
  Main.port
  Main.removeClient
  Main.runClient
  Main.sendMessage
  Main.sendToName
  Main.talk
  Main.tell
  Main.Client{Main.Client clientHandle clientIP clientKicked clientName clientPort clientSendChan}
  Main.ClientName
  Main.Message{Main.Broadcast Main.Command Main.Notice Main.Tell}
  Main.Server{Main.Server clients}
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1
                      async-2.1.1.1@async-2.1.1.1-8yywY4inVGRLJSCg60gBXj base-4.9.1.0
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      network-2.6.3.2@network-2.6.3.2-IsLM4TXcLoRI0fmmBYVyQz
                      stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         network-2.6.3.2@network-2.6.3.2-IsLM4TXcLoRI0fmmBYVyQz:Network.Socket
         stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Monad.STM
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
import  -/  async-2.1.1.1@async-2.1.1.1-8yywY4inVGRLJSCg60gBXj:Control.Concurrent.Async ea0392541014747b7209d5d4a7804b6a
import  -/  base-4.9.1.0:Control.Concurrent 2ee6a0a58489520b9a96d8fef10380fa
import  -/  base-4.9.1.0:Control.Exception a76dd9666251322fe34dbcca3a0817bf
import  -/  base-4.9.1.0:Control.Exception.Base 1e106916283856f4d9caeddab92cd861
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.Functor 5ab1dc703df5b482e77efb697833ca3c
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Conc.Sync 8d0a228e5fc4d8c110495066f4d52ea1
import  -/  base-4.9.1.0:GHC.IO eb504c57b397cf133849f8586f15dafb
import  -/  base-4.9.1.0:GHC.IO.Handle ba98a5b34d78cbf48b41fe58a3735c69
import  -/  base-4.9.1.0:GHC.IO.Handle.Text b65719f3b262b071ab1aabeb72fc9d8b
import  -/  base-4.9.1.0:GHC.IO.Handle.Types 17aa0e2ab137800e3a31992d780c071f
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO c9de64c5f5407c4cf1c52500c4d15200
import  -/  base-4.9.1.0:Text.Printf 6701574960cd2af960fec5d940be0c25
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 0fd5c8559af8bc4b6f38b9cf9ba5a467
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base 8b155a212edaca6c85bcefe65a8bc505
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  network-2.6.3.2@network-2.6.3.2-IsLM4TXcLoRI0fmmBYVyQz:Network e1c2bc629a33bc735be38b505b5877ff
import  -/  network-2.6.3.2@network-2.6.3.2-IsLM4TXcLoRI0fmmBYVyQz:Network.Socket.Internal 9f052186d90733a29fe9bf6bf8921c1c
import  -/  network-2.6.3.2@network-2.6.3.2-IsLM4TXcLoRI0fmmBYVyQz:Network.Socket.Types 2eb8a83dc42cc86a12e652ce3294cbda
import  -/  stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Concurrent.STM 3662559905a40ae5adbc3e935ac706c8
import  -/  stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Concurrent.STM.TChan 791cd378857d88a7ed4d753121139423
import  -/  stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Concurrent.STM.TVar 8271fdeaf6f41f205dbe31243cf91390
a846f91ed410bfd476ab850310e22e30
  $s$fPrintfArg[]_$s$fPrintfArg[]_$cparseFormat ::
    [GHC.Types.Char] -> Text.Printf.ModifierParser
  {- Arity: 2, Strictness: <L,A><S,1*U>m,
     Unfolding: InlineRule (2, True, False)
                (\ (ds1 :: [GHC.Types.Char]) (ds2 :: [GHC.Types.Char]) ->
                 case ds2 of wild {
                   [] -> Text.Printf.errorShortFormat @ Text.Printf.FormatParse
                   : c1 cs
                   -> Text.Printf.FormatParse
                        (GHC.Types.[] @ GHC.Types.Char)
                        c1
                        cs }) -}
e2d1fee3734c6c0611f9da519e4927c3
  $sdelete_$sgo10 ::
    Main.ClientName
    -> Data.Map.Base.Map Main.ClientName a1
    -> Data.Map.Base.Map Main.ClientName a1
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
19582a2c0e923c13a486d1ae70cb27ce
  $shPrintf3 :: () GHC.Types.~~ ()
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Eq# @ * @ * @ () @ () @~ <()>_N) -}
b2d0495f6111a77e30e94f3013a7486c
  $sinsert_$sgo10 ::
    Main.ClientName
    -> a1
    -> Data.Map.Base.Map Main.ClientName a1
    -> Data.Map.Base.Map Main.ClientName a1
  {- Arity: 3, Strictness: <S,1*U><L,U><S,1*U> -}
c44cd478f7edb4b5613248c8640118bc
  $slookup1 ::
    Main.ClientName
    -> Data.Map.Base.Map Main.ClientName a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
dcc79363d9be3723158cf1587b5fabe2
  $smember1 ::
    Main.ClientName
    -> Data.Map.Base.Map Main.ClientName a -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
6210aa73a4bb794a27ad3ad0105b5910
  $tc'Broadcast :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3142049783279842247##
                   10598622670723664079##
                   Main.$trModule
                   Main.$tc'Broadcast1) -}
99f3455298ef37c6bc51a517745ed47c
  $tc'Broadcast1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Broadcast"#) -}
e62d791731323355b04c005ddd44e49e
  $tc'Client :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14317905627767584460##
                   8020356174247805466##
                   Main.$trModule
                   Main.$tc'Client1) -}
1e31cdcbef3d5a45efde6decabdcaefc
  $tc'Client1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Client"#) -}
71a1d0da8ac90eb52db4e0337dee0105
  $tc'Command :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14407055736893994245##
                   9773285697625515779##
                   Main.$trModule
                   Main.$tc'Command1) -}
df8b35970719712831612cdf74ffb012
  $tc'Command1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Command"#) -}
57b1ac4201832c30493ec9a295c14d2f
  $tc'Notice :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15229285715904568610##
                   3488434391775625185##
                   Main.$trModule
                   Main.$tc'Notice1) -}
f3b0346477898073dacc46ad3023034c
  $tc'Notice1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Notice"#) -}
e2e47e4b095050486d76025efbb9eb8d
  $tc'Server :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17147978485207381799##
                   15204794003762209136##
                   Main.$trModule
                   Main.$tc'Server1) -}
0a4a60082ab2028484dd711c5f968b45
  $tc'Server1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Server"#) -}
f6527bd3bc63707106577bb465348dc3
  $tc'Tell :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12964543874649828835##
                   2370310664630534447##
                   Main.$trModule
                   Main.$tc'Tell1) -}
10ed56c7883df4ff9abdf3ea93aa9708
  $tc'Tell1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Tell"#) -}
824c8b6e5d1e111a64ffa02e17dfa0f0
  $tcClient :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2041806266336690928##
                   6211083142683335045##
                   Main.$trModule
                   Main.$tcClient1) -}
f6308ac30128598c150371405caec582
  $tcClient1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Client"#) -}
a317a2b68abab7bca30880bdf39d36dc
  $tcMessage :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11750200497582023075##
                   1107912994446066806##
                   Main.$trModule
                   Main.$tcMessage1) -}
9d158e0a5fe47b777c8610b9e6ae8f21
  $tcMessage1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Message"#) -}
6aba3734e0be30f8602a90a2af677de2
  $tcServer :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7505357571270362355##
                   10136080178563477716##
                   Main.$trModule
                   Main.$tcServer1) -}
9dec17e7d0d7ed6f4ff7f48675023568
  $tcServer1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Server"#) -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
e99874191ea16b04bca65431d2ce5e82
  $wbroadcast ::
    GHC.Prim.TVar#
      GHC.Prim.RealWorld (Data.Map.Base.Map Main.ClientName Main.Client)
    -> Main.Message
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.TVar#
                            GHC.Prim.RealWorld (Data.Map.Base.Map Main.ClientName Main.Client))
                   (w :: Main.Message)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.readTVar#
                        @ GHC.Prim.RealWorld
                        @ (Data.Map.Base.Map Main.ClientName Main.Client)
                        ww
                        w1 of ds1 { (#,#) ipv ipv1 ->
                 letrec {
                   go10 :: GHC.Conc.Sync.STM ()
                           -> Data.Map.Base.Map [GHC.Types.Char] Main.Client
                           -> GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     {- Arity: 3, Strictness: <C(S),1*C1(U(U,U))><S,1*U><S,U> -}
                   = \ (z' :: GHC.Conc.Sync.STM ())
                       (ds :: Data.Map.Base.Map [GHC.Types.Char] Main.Client)
                       (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case ds of wild {
                       Data.Map.Base.Bin dt kx x l r
                       -> go10
                            (\ (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                             case x of wild1 { Main.Client ds2 ds3 ds4 ds5 ds6 ds7 ->
                             case ds7 of wild2 { Control.Concurrent.STM.TChan.TChan dt1 dt2 ->
                             case GHC.Prim.readTVar#
                                    @ GHC.Prim.RealWorld
                                    @ (Control.Concurrent.STM.TChan.TVarList Main.Message)
                                    dt2
                                    eta1 of ds8 { (#,#) ipv2 ipv3 ->
                             case GHC.Prim.newTVar#
                                    @ (Control.Concurrent.STM.TChan.TList Main.Message)
                                    @ GHC.Prim.RealWorld
                                    (Control.Concurrent.STM.TChan.TNil @ Main.Message)
                                    ipv2 of ds9 { (#,#) ipv4 ipv5 ->
                             case ipv3 of wild3 { GHC.Conc.Sync.TVar tvar# ->
                             case GHC.Prim.writeTVar#
                                    @ GHC.Prim.RealWorld
                                    @ (Control.Concurrent.STM.TChan.TList Main.Message)
                                    tvar#
                                    (Control.Concurrent.STM.TChan.TCons @ Main.Message w ipv5)
                                    ipv4 of s2# { DEFAULT ->
                             case GHC.Prim.writeTVar#
                                    @ GHC.Prim.RealWorld
                                    @ (Control.Concurrent.STM.TChan.TVarList Main.Message)
                                    dt2
                                    (GHC.Conc.Sync.TVar
                                       @ (Control.Concurrent.STM.TChan.TList Main.Message)
                                       ipv5)
                                    s2# of s2#1 { DEFAULT ->
                             go10 z' r s2#1 } } } } } } })
                              `cast`
                            (Sym (GHC.Conc.Sync.N:STM[0] <()>_R))
                            l
                            eta
                       Data.Map.Base.Tip
                       -> z' `cast` (GHC.Conc.Sync.N:STM[0] <()>_R) eta }
                 } in
                 go10
                   Main.broadcast2 `cast` (Sym (GHC.Conc.Sync.N:STM[0] <()>_R))
                   ipv1
                   ipv }) -}
fbaf210397338249c41d90c7c3501b16
  $wcheckAddClient ::
    GHC.Prim.TVar#
      GHC.Prim.RealWorld (Data.Map.Base.Map Main.ClientName Main.Client)
    -> Main.ClientName
    -> GHC.Base.String
    -> Network.Socket.Types.PortNumber
    -> GHC.IO.Handle.Types.Handle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Base.Maybe Main.Client #)
  {- Arity: 6, Strictness: <S,U><S,U><L,U><L,U><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.TVar#
                            GHC.Prim.RealWorld (Data.Map.Base.Map Main.ClientName Main.Client))
                   (w :: Main.ClientName)
                   (w1 :: GHC.Base.String)
                   (w2 :: Network.Socket.Types.PortNumber)
                   (w3 :: GHC.IO.Handle.Types.Handle)
                   (w4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 GHC.Prim.atomically#
                   @ (GHC.Base.Maybe Main.Client)
                   (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case GHC.Prim.readTVar#
                           @ GHC.Prim.RealWorld
                           @ (Data.Map.Base.Map Main.ClientName Main.Client)
                           ww
                           s of ds1 { (#,#) ipv ipv1 ->
                    case Main.$smember1 @ Main.Client w ipv1 of wild {
                      GHC.Types.False
                      -> case GHC.Prim.newTVar#
                                @ (Control.Concurrent.STM.TChan.TList Main.Message)
                                @ GHC.Prim.RealWorld
                                (Control.Concurrent.STM.TChan.TNil @ Main.Message)
                                ipv of ds { (#,#) ipv2 ipv3 ->
                         let {
                           hole :: GHC.Conc.Sync.TVar
                                     (Control.Concurrent.STM.TChan.TList Main.Message)
                             {- Strictness: m -}
                           = GHC.Conc.Sync.TVar
                               @ (Control.Concurrent.STM.TChan.TList Main.Message)
                               ipv3
                         } in
                         case GHC.Prim.newTVar#
                                @ (GHC.Conc.Sync.TVar
                                     (Control.Concurrent.STM.TChan.TList Main.Message))
                                @ GHC.Prim.RealWorld
                                hole
                                ipv2 of ds2 { (#,#) ipv4 ipv5 ->
                         case GHC.Prim.newTVar#
                                @ (GHC.Conc.Sync.TVar
                                     (Control.Concurrent.STM.TChan.TList Main.Message))
                                @ GHC.Prim.RealWorld
                                hole
                                ipv4 of ds3 { (#,#) ipv6 ipv7 ->
                         case GHC.Prim.newTVar#
                                @ (GHC.Base.Maybe GHC.Base.String)
                                @ GHC.Prim.RealWorld
                                (GHC.Base.Nothing @ GHC.Base.String)
                                ipv6 of ds4 { (#,#) ipv8 ipv9 ->
                         let {
                           ipv10 :: GHC.Conc.Sync.TVar (GHC.Base.Maybe GHC.Base.String)
                             {- Strictness: m -}
                           = GHC.Conc.Sync.TVar @ (GHC.Base.Maybe GHC.Base.String) ipv9
                         } in
                         let {
                           ipv11 :: Control.Concurrent.STM.TChan.TChan Main.Message
                             {- Strictness: m -}
                           = Control.Concurrent.STM.TChan.TChan @ Main.Message ipv5 ipv7
                         } in
                         let {
                           client :: Main.Client {- Strictness: m -}
                           = Main.Client w w1 w2 w3 ipv10 ipv11
                         } in
                         case GHC.Prim.writeTVar#
                                @ GHC.Prim.RealWorld
                                @ (Data.Map.Base.Map Main.ClientName Main.Client)
                                ww
                                (Main.$sinsert_$sgo10 @ Main.Client w client ipv1)
                                ipv8 of s2# { DEFAULT ->
                         case Main.$wbroadcast
                                ww
                                (Main.Notice (GHC.Base.++ @ GHC.Types.Char w Main.checkAddClient2))
                                s2# of ds5 { (#,#) ipv12 ipv13 ->
                         (# ipv12, GHC.Base.Just @ Main.Client client #) } } } } } }
                      GHC.Types.True -> (# ipv, GHC.Base.Nothing @ Main.Client #) } })
                   w4) -}
012bb0e2304c233568173756ef7c29f7
  $whandleMessage ::
    Main.Server
    -> Main.ClientName
    -> GHC.Base.String
    -> GHC.IO.Handle.Types.Handle
    -> Main.Message
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 6,
     Strictness: <L,1*U(1*U(U))><L,U><L,1*U><L,U><S,1*U><S,U>,
     Inline: [0] -}
433b58766f53f3c4320a0c59e2620c24
  $wheloText ::
    GHC.Prim.TVar#
      GHC.Prim.RealWorld (Data.Map.Base.Map Main.ClientName Main.Client)
    -> Main.ClientName
    -> GHC.Base.String
    -> GHC.IO.Handle.Types.Handle
    -> Main.ClientName
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6, Strictness: <S,U><L,U><L,1*U><L,U><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.TVar#
                            GHC.Prim.RealWorld (Data.Map.Base.Map Main.ClientName Main.Client))
                   (ww1 :: Main.ClientName)
                   (ww2 :: GHC.Base.String)
                   (ww3 :: GHC.IO.Handle.Types.Handle)
                   (w :: Main.ClientName)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.atomically#
                        @ GHC.Types.Bool
                        (\ (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         Main.$wsendToName
                           ww
                           w
                           (Main.Tell
                              ww1
                              (GHC.CString.unpackAppendCString#
                                 "HELO text\n\
                                 \IP:"#
                                 (GHC.Base.++ @ GHC.Types.Char ww2 Main.heloText3)))
                           w2)
                        w1 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   GHC.Types.False
                   -> GHC.IO.Handle.Text.hPutStr2
                        ww3
                        (GHC.Base.++ @ GHC.Types.Char w Main.heloText2)
                        GHC.Types.True
                        ipv
                   GHC.Types.True -> (# ipv, GHC.Tuple.() #) } }) -}
88446f512bfc7723054e446e070104d7
  $wkick ::
    GHC.Prim.TVar#
      GHC.Prim.RealWorld (Data.Map.Base.Map Main.ClientName Main.Client)
    -> Main.ClientName
    -> Main.ClientName
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <S,U><S,U><S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.TVar#
                            GHC.Prim.RealWorld (Data.Map.Base.Map Main.ClientName Main.Client))
                   (w :: Main.ClientName)
                   (w1 :: Main.ClientName)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.readTVar#
                        @ GHC.Prim.RealWorld
                        @ (Data.Map.Base.Map Main.ClientName Main.Client)
                        ww
                        w2 of ds1 { (#,#) ipv ipv1 ->
                 case Main.$slookup1 @ Main.Client w ipv1 of wild {
                   GHC.Base.Nothing
                   -> case GHC.Prim.readTVar#
                             @ GHC.Prim.RealWorld
                             @ (Data.Map.Base.Map Main.ClientName Main.Client)
                             ww
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      case Main.$slookup1 @ Main.Client w1 ipv3 of wild1 {
                        GHC.Base.Nothing -> (# ipv2, GHC.Tuple.() #)
                        GHC.Base.Just client
                        -> case client of wild2 { Main.Client ds ds3 ds4 ds5 ds6 ds7 ->
                           case ds7 of wild3 { Control.Concurrent.STM.TChan.TChan dt dt1 ->
                           case GHC.Prim.readTVar#
                                  @ GHC.Prim.RealWorld
                                  @ (Control.Concurrent.STM.TChan.TVarList Main.Message)
                                  dt1
                                  ipv2 of ds8 { (#,#) ipv4 ipv5 ->
                           case GHC.Prim.newTVar#
                                  @ (Control.Concurrent.STM.TChan.TList Main.Message)
                                  @ GHC.Prim.RealWorld
                                  (Control.Concurrent.STM.TChan.TNil @ Main.Message)
                                  ipv4 of ds9 { (#,#) ipv6 ipv7 ->
                           case ipv5 of wild4 { GHC.Conc.Sync.TVar tvar# ->
                           case GHC.Prim.writeTVar#
                                  @ GHC.Prim.RealWorld
                                  @ (Control.Concurrent.STM.TChan.TList Main.Message)
                                  tvar#
                                  (Control.Concurrent.STM.TChan.TCons
                                     @ Main.Message
                                     (Main.Notice (GHC.Base.++ @ GHC.Types.Char w Main.kick2))
                                     ipv7)
                                  ipv6 of s2# { DEFAULT ->
                           case GHC.Prim.writeTVar#
                                  @ GHC.Prim.RealWorld
                                  @ (Control.Concurrent.STM.TChan.TVarList Main.Message)
                                  dt1
                                  (GHC.Conc.Sync.TVar
                                     @ (Control.Concurrent.STM.TChan.TList Main.Message)
                                     ipv7)
                                  s2# of s2#1 { DEFAULT ->
                           (# s2#1, GHC.Tuple.() #) } } } } } } } } }
                   GHC.Base.Just victim
                   -> case victim of wild1 { Main.Client ds ds2 ds3 ds4 ds5 ds6 ->
                      case ds5 of wild2 { GHC.Conc.Sync.TVar tvar# ->
                      case GHC.Prim.writeTVar#
                             @ GHC.Prim.RealWorld
                             @ (GHC.Base.Maybe GHC.Base.String)
                             tvar#
                             (GHC.Base.Just
                                @ [GHC.Types.Char]
                                (GHC.CString.unpackAppendCString# "by "# w1))
                             ipv of s2# { DEFAULT ->
                      case GHC.Prim.readTVar#
                             @ GHC.Prim.RealWorld
                             @ (Data.Map.Base.Map Main.ClientName Main.Client)
                             ww
                             s2# of ds7 { (#,#) ipv2 ipv3 ->
                      case Main.$slookup1 @ Main.Client w1 ipv3 of wild3 {
                        GHC.Base.Nothing -> (# ipv2, GHC.Tuple.() #)
                        GHC.Base.Just client
                        -> case client of wild4 { Main.Client ds8 ds9 ds10 ds11 ds12 ds13 ->
                           case ds13 of wild5 { Control.Concurrent.STM.TChan.TChan dt dt1 ->
                           case GHC.Prim.readTVar#
                                  @ GHC.Prim.RealWorld
                                  @ (Control.Concurrent.STM.TChan.TVarList Main.Message)
                                  dt1
                                  ipv2 of ds14 { (#,#) ipv4 ipv5 ->
                           case GHC.Prim.newTVar#
                                  @ (Control.Concurrent.STM.TChan.TList Main.Message)
                                  @ GHC.Prim.RealWorld
                                  (Control.Concurrent.STM.TChan.TNil @ Main.Message)
                                  ipv4 of ds15 { (#,#) ipv6 ipv7 ->
                           case ipv5 of wild6 { GHC.Conc.Sync.TVar tvar#1 ->
                           case GHC.Prim.writeTVar#
                                  @ GHC.Prim.RealWorld
                                  @ (Control.Concurrent.STM.TChan.TList Main.Message)
                                  tvar#1
                                  (Control.Concurrent.STM.TChan.TCons
                                     @ Main.Message
                                     (Main.Notice
                                        (GHC.CString.unpackAppendCString# "you kicked "# w))
                                     ipv7)
                                  ipv6 of s2#1 { DEFAULT ->
                           case GHC.Prim.writeTVar#
                                  @ GHC.Prim.RealWorld
                                  @ (Control.Concurrent.STM.TChan.TVarList Main.Message)
                                  dt1
                                  (GHC.Conc.Sync.TVar
                                     @ (Control.Concurrent.STM.TChan.TList Main.Message)
                                     ipv7)
                                  s2#1 of s2#2 { DEFAULT ->
                           (# s2#2, GHC.Tuple.() #) } } } } } } } } } } } } } }) -}
5cbc292e4100dd9750e83fe51689fdd0
  $wremoveClient ::
    GHC.Prim.TVar#
      GHC.Prim.RealWorld (Data.Map.Base.Map Main.ClientName Main.Client)
    -> Main.ClientName
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <S,U><S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.TVar#
                            GHC.Prim.RealWorld (Data.Map.Base.Map Main.ClientName Main.Client))
                   (w :: Main.ClientName)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 GHC.Prim.atomically#
                   @ ()
                   (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case GHC.Prim.readTVar#
                           @ GHC.Prim.RealWorld
                           @ (Data.Map.Base.Map Main.ClientName Main.Client)
                           ww
                           s of ds1 { (#,#) ipv ipv1 ->
                    case Main.$sdelete_$sgo10 @ Main.Client w ipv1 of vx { DEFAULT ->
                    case GHC.Prim.writeTVar#
                           @ GHC.Prim.RealWorld
                           @ (Data.Map.Base.Map Main.ClientName Main.Client)
                           ww
                           vx
                           ipv of s2# { DEFAULT ->
                    Main.$wbroadcast
                      ww
                      (Main.Notice (GHC.Base.++ @ GHC.Types.Char w Main.removeClient2))
                      s2# } } })
                   w1) -}
0707b2a12fa5c030b653a871aa083e39
  $wrunClient ::
    GHC.Conc.Sync.TVar (Data.Map.Base.Map Main.ClientName Main.Client)
    -> Main.ClientName
    -> GHC.Base.String
    -> GHC.IO.Handle.Types.Handle
    -> GHC.Conc.Sync.TVar (GHC.Base.Maybe GHC.Base.String)
    -> Control.Concurrent.STM.TChan.TChan Main.Message
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7,
     Strictness: <L,U(U)><L,U><L,U><L,U><L,U(U)><L,U(U,U)><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Conc.Sync.TVar
                            (Data.Map.Base.Map Main.ClientName Main.Client))
                   (ww1 :: Main.ClientName)
                   (ww2 :: GHC.Base.String)
                   (ww3 :: GHC.IO.Handle.Types.Handle)
                   (ww4 :: GHC.Conc.Sync.TVar (GHC.Base.Maybe GHC.Base.String))
                   (ww5 :: Control.Concurrent.STM.TChan.TChan Main.Message)
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Control.Concurrent.Async.$fAlternativeConcurrently7
                        @ ()
                        @ GHC.Prim.Any
                        @ (Data.Either.Either () GHC.Prim.Any)
                        (letrec {
                           server :: GHC.Prim.State# GHC.Prim.RealWorld
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                             {- Arity: 1, Strictness: <S,U> -}
                           = \ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                             case GHC.Prim.atomically#
                                    @ (GHC.Types.IO ())
                                    (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                     case ww4 of wild { GHC.Conc.Sync.TVar tvar# ->
                                     case GHC.Prim.readTVar#
                                            @ GHC.Prim.RealWorld
                                            @ (GHC.Base.Maybe GHC.Base.String)
                                            tvar#
                                            s1 of ds1 { (#,#) ipv ipv1 ->
                                     case ipv1 of wild1 {
                                       GHC.Base.Nothing
                                       -> case ww5 of ww6 { Control.Concurrent.STM.TChan.TChan ww7 ww8 ->
                                          case GHC.Prim.readTVar#
                                                 @ GHC.Prim.RealWorld
                                                 @ (Control.Concurrent.STM.TChan.TVarList
                                                      Main.Message)
                                                 ww7
                                                 ipv of ds2 { (#,#) ipv2 ipv3 ->
                                          case ipv3 of wild2 { GHC.Conc.Sync.TVar tvar#1 ->
                                          case GHC.Prim.readTVar#
                                                 @ GHC.Prim.RealWorld
                                                 @ (Control.Concurrent.STM.TChan.TList Main.Message)
                                                 tvar#1
                                                 ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                                          case ipv5 of wild3 {
                                            Control.Concurrent.STM.TChan.TNil
                                            -> case GHC.Prim.retry# @ Main.Message ipv4
                                               ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         GHC.Types.IO () #)
                                               of {}
                                            Control.Concurrent.STM.TChan.TCons a1 dt
                                            -> case GHC.Prim.writeTVar#
                                                      @ GHC.Prim.RealWorld
                                                      @ (Control.Concurrent.STM.TChan.TVarList
                                                           Main.Message)
                                                      ww7
                                                      (GHC.Conc.Sync.TVar
                                                         @ (Control.Concurrent.STM.TChan.TList
                                                              Main.Message)
                                                         dt)
                                                      ipv4 of s2# { DEFAULT ->
                                               (# s2#,
                                                  (\ (s2 :: GHC.Prim.State#
                                                              GHC.Prim.RealWorld)[OneShot] ->
                                                   case Main.$whandleMessage
                                                          (Main.Server ww)
                                                          ww1
                                                          ww2
                                                          ww3
                                                          a1
                                                          s2 of ds4 { (#,#) ipv6 ipv7 ->
                                                   case ipv7 of wild4 {
                                                     GHC.Types.False -> (# ipv6, GHC.Tuple.() #)
                                                     GHC.Types.True -> server ipv6 } })
                                                    `cast`
                                                  (Sym (GHC.Types.N:IO[0] <()>_R)) #) } } } } } }
                                       GHC.Base.Just reason
                                       -> (# ipv,
                                             (\ (eta :: GHC.Prim.State#
                                                          GHC.Prim.RealWorld)[OneShot] ->
                                              GHC.IO.Handle.Text.hPutStr2
                                                ww3
                                                (GHC.CString.unpackAppendCString#
                                                   "You have been kicked: "#
                                                   reason)
                                                GHC.Types.True
                                                eta)
                                               `cast`
                                             (Sym (GHC.Types.N:IO[0] <()>_R)) #) } } })
                                    s of ds1 { (#,#) ipv ipv1 ->
                             ipv1 `cast` (GHC.Types.N:IO[0] <()>_R) ipv }
                         } in
                         server `cast` (Sym (GHC.Types.N:IO[0] <()>_R)))
                        (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         letrec {
                           a' :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Any #)
                             {- Arity: 1, Strictness: <S,U> -}
                           = \ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                             case GHC.IO.Handle.Internals.wantReadableHandle_1
                                    @ GHC.Base.String
                                    GHC.IO.Handle.Text.hGetLine4
                                    ww3
                                    GHC.IO.Handle.Text.hGetLine2
                                      `cast`
                                    (<GHC.IO.Handle.Types.Handle__>_R
                                     ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                                    s of ds1 { (#,#) ipv ipv1 ->
                             case GHC.Prim.atomically#
                                    @ ()
                                    (\ (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                     case ww5 of wild { Control.Concurrent.STM.TChan.TChan dt dt1 ->
                                     case GHC.Prim.readTVar#
                                            @ GHC.Prim.RealWorld
                                            @ (Control.Concurrent.STM.TChan.TVarList Main.Message)
                                            dt1
                                            eta1 of ds2 { (#,#) ipv2 ipv3 ->
                                     case GHC.Prim.newTVar#
                                            @ (Control.Concurrent.STM.TChan.TList Main.Message)
                                            @ GHC.Prim.RealWorld
                                            (Control.Concurrent.STM.TChan.TNil @ Main.Message)
                                            ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                                     case ipv3 of wild1 { GHC.Conc.Sync.TVar tvar# ->
                                     case GHC.Prim.writeTVar#
                                            @ GHC.Prim.RealWorld
                                            @ (Control.Concurrent.STM.TChan.TList Main.Message)
                                            tvar#
                                            (Control.Concurrent.STM.TChan.TCons
                                               @ Main.Message
                                               (Main.Command ipv1)
                                               ipv5)
                                            ipv4 of s2# { DEFAULT ->
                                     case GHC.Prim.writeTVar#
                                            @ GHC.Prim.RealWorld
                                            @ (Control.Concurrent.STM.TChan.TVarList Main.Message)
                                            dt1
                                            (GHC.Conc.Sync.TVar
                                               @ (Control.Concurrent.STM.TChan.TList Main.Message)
                                               ipv5)
                                            s2# of s2#1 { DEFAULT ->
                                     (# s2#1, GHC.Tuple.() #) } } } } } })
                                    ipv of ds2 { (#,#) ipv2 ipv3 ->
                             a' ipv2 } }
                         } in
                         a' eta)
                          `cast`
                        (Sym (GHC.Types.N:IO[0] <GHC.Prim.Any>_R))
                        (Control.Concurrent.Async.$fAlternativeConcurrently2
                           @ ()
                           @ GHC.Prim.Any)
                          `cast`
                        (<GHC.Types.IO
                            (Data.Either.Either
                               GHC.Exception.SomeException
                               (Data.Either.Either () GHC.Prim.Any))>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <Data.Either.Either () GHC.Prim.Any>_R))
                        w of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Tuple.() #) }) -}
c2ac52c9dfac3ebb3f340a8549fd0509
  $wsendToName ::
    GHC.Prim.TVar#
      GHC.Prim.RealWorld (Data.Map.Base.Map Main.ClientName Main.Client)
    -> Main.ClientName
    -> Main.Message
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 4, HasNoCafRefs, Strictness: <S,U><S,1*U><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.TVar#
                            GHC.Prim.RealWorld (Data.Map.Base.Map Main.ClientName Main.Client))
                   (w :: Main.ClientName)
                   (w1 :: Main.Message)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.readTVar#
                        @ GHC.Prim.RealWorld
                        @ (Data.Map.Base.Map Main.ClientName Main.Client)
                        ww
                        w2 of ds1 { (#,#) ipv ipv1 ->
                 case Main.$slookup1 @ Main.Client w ipv1 of wild {
                   GHC.Base.Nothing -> (# ipv, GHC.Types.False #)
                   GHC.Base.Just client
                   -> case client of wild1 { Main.Client ds ds2 ds3 ds4 ds5 ds6 ->
                      case ds6 of wild2 { Control.Concurrent.STM.TChan.TChan dt dt1 ->
                      case GHC.Prim.readTVar#
                             @ GHC.Prim.RealWorld
                             @ (Control.Concurrent.STM.TChan.TVarList Main.Message)
                             dt1
                             ipv of ds7 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.newTVar#
                             @ (Control.Concurrent.STM.TChan.TList Main.Message)
                             @ GHC.Prim.RealWorld
                             (Control.Concurrent.STM.TChan.TNil @ Main.Message)
                             ipv2 of ds8 { (#,#) ipv4 ipv5 ->
                      case ipv3 of wild3 { GHC.Conc.Sync.TVar tvar# ->
                      case GHC.Prim.writeTVar#
                             @ GHC.Prim.RealWorld
                             @ (Control.Concurrent.STM.TChan.TList Main.Message)
                             tvar#
                             (Control.Concurrent.STM.TChan.TCons @ Main.Message w1 ipv5)
                             ipv4 of s2# { DEFAULT ->
                      case GHC.Prim.writeTVar#
                             @ GHC.Prim.RealWorld
                             @ (Control.Concurrent.STM.TChan.TVarList Main.Message)
                             dt1
                             (GHC.Conc.Sync.TVar
                                @ (Control.Concurrent.STM.TChan.TList Main.Message)
                                ipv5)
                             s2# of s2#1 { DEFAULT ->
                      (# s2#1, GHC.Types.True #) } } } } } } } } }) -}
1ef04d2595b02b9c08805672051b21cc
  $wtalk ::
    GHC.Base.String
    -> Network.Socket.Types.PortNumber
    -> GHC.IO.Handle.Types.Handle
    -> GHC.Conc.Sync.TVar
         (Data.Map.Base.Map Main.ClientName Main.Client)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5, Strictness: <L,U><L,U><S,U><L,U(U)><S,U>,
     Inline: [0] -}
c59f29cd8e1758614cfe808f56a4eb86
  $wtell ::
    GHC.Prim.TVar#
      GHC.Prim.RealWorld (Data.Map.Base.Map Main.ClientName Main.Client)
    -> Main.ClientName
    -> GHC.IO.Handle.Types.Handle
    -> Main.ClientName
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6, Strictness: <S,U><L,U><L,U><S,U><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.TVar#
                            GHC.Prim.RealWorld (Data.Map.Base.Map Main.ClientName Main.Client))
                   (ww1 :: Main.ClientName)
                   (ww2 :: GHC.IO.Handle.Types.Handle)
                   (w :: Main.ClientName)
                   (w1 :: GHC.Base.String)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.atomically#
                        @ GHC.Types.Bool
                        (\ (w3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         Main.$wsendToName ww w (Main.Tell ww1 w1) w3)
                        w2 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   GHC.Types.False
                   -> GHC.IO.Handle.Text.hPutStr2
                        ww2
                        (GHC.Base.++ @ GHC.Types.Char w Main.heloText2)
                        GHC.Types.True
                        ipv
                   GHC.Types.True -> (# ipv, GHC.Tuple.() #) } }) -}
e179f188b3e912e878d372a018f2bb5d
  data Client
    = Client {clientName :: Main.ClientName,
              clientIP :: GHC.Base.String,
              clientPort :: Network.Socket.Types.PortNumber,
              clientHandle :: GHC.IO.Handle.Types.Handle,
              clientKicked :: GHC.Conc.Sync.TVar
                                (GHC.Base.Maybe GHC.Base.String),
              clientSendChan :: Control.Concurrent.STM.TChan.TChan Main.Message}
fbed4067a26e1dec37a31b9eba546428
  type ClientName = GHC.Base.String
5dbd4a2359c929efd03db7d129b982f9
  data Message
    = Notice GHC.Base.String
    | Tell Main.ClientName GHC.Base.String
    | Broadcast Main.ClientName GHC.Base.String
    | Command GHC.Base.String
01867b89b35b22259ad0b036329a4e73
  data Server
    = Server {clients :: GHC.Conc.Sync.TVar
                           (Data.Map.Base.Map Main.ClientName Main.Client)}
3c0b431d266d7ad38f9d6c2307240254
  broadcast :: Main.Server -> Main.Message -> GHC.Conc.Sync.STM ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(S)),1*U(1*U(U))><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.broadcast1
                  `cast`
                (<Main.Server>_R
                 ->_R <Main.Message>_R
                 ->_R Sym (GHC.Conc.Sync.N:STM[0] <()>_R)) -}
74cdec500400c179ac683599327b4d22
  broadcast1 ::
    Main.Server
    -> Main.Message
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(S)),1*U(1*U(U))><L,U><S,U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Main.Server)
                   (w1 :: Main.Message)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { Main.Server ww1 ->
                 case ww1 of ww2 { GHC.Conc.Sync.TVar ww3 ->
                 Main.$wbroadcast ww3 w1 w2 } }) -}
45324ee44e058343a8d08de9eb117f7e
  broadcast2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s, GHC.Tuple.() #)) -}
24a5a500ecdd18d8e3250f1b0c20537f
  checkAddClient ::
    Main.Server
    -> Main.ClientName
    -> GHC.Base.String
    -> Network.Socket.Types.PortNumber
    -> GHC.IO.Handle.Types.Handle
    -> GHC.Types.IO (GHC.Base.Maybe Main.Client)
  {- Arity: 6,
     Strictness: <S(S(S)),1*U(U(U))><S,U><L,U><L,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.checkAddClient1
                  `cast`
                (<Main.Server>_R
                 ->_R <Main.ClientName>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <Network.Socket.Types.PortNumber>_R
                 ->_R <GHC.IO.Handle.Types.Handle>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.Maybe Main.Client>_R)) -}
2a28eaf0f92796172f20076de26dcec2
  checkAddClient1 ::
    Main.Server
    -> Main.ClientName
    -> GHC.Base.String
    -> Network.Socket.Types.PortNumber
    -> GHC.IO.Handle.Types.Handle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Base.Maybe Main.Client #)
  {- Arity: 6,
     Strictness: <S(S(S)),1*U(U(U))><S,U><L,U><L,U><L,U><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ (w :: Main.Server)
                   (w1 :: Main.ClientName)
                   (w2 :: GHC.Base.String)
                   (w3 :: Network.Socket.Types.PortNumber)
                   (w4 :: GHC.IO.Handle.Types.Handle)
                   (w5 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { Main.Server ww1 ->
                 case ww1 of ww2 { GHC.Conc.Sync.TVar ww3 ->
                 Main.$wcheckAddClient ww3 w1 w2 w3 w4 w5 } }) -}
86423d3a608096ae01fb688cae930cf1
  checkAddClient2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# " has connected"#) -}
6a68254e39cd77c3a13e23c38e2583e6
  clientHandle :: Main.Client -> GHC.IO.Handle.Types.Handle
  RecSel Left Main.Client
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLL),1*U(A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Client) ->
                 case ds of wild { Main.Client ds1 ds2 ds3 ds4 ds5 ds6 -> ds4 }) -}
112fb90e58891119a966c1e340140bc8
  clientIP :: Main.Client -> GHC.Base.String
  RecSel Left Main.Client
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLL),1*U(A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Client) ->
                 case ds of wild { Main.Client ds1 ds2 ds3 ds4 ds5 ds6 -> ds2 }) -}
2547e6a0bbf921661194be8be9252669
  clientKicked ::
    Main.Client -> GHC.Conc.Sync.TVar (GHC.Base.Maybe GHC.Base.String)
  RecSel Left Main.Client
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSL),1*U(A,A,A,A,1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Client) ->
                 case ds of wild { Main.Client ds1 ds2 ds3 ds4 ds5 ds6 -> ds5 }) -}
9789311635e47be928848b5660564058
  clientName :: Main.Client -> Main.ClientName
  RecSel Left Main.Client
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLL),1*U(1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Client) ->
                 case ds of wild { Main.Client ds1 ds2 ds3 ds4 ds5 ds6 -> ds1 }) -}
de3351cf95dfd4e719632d89778feed7
  clientPort :: Main.Client -> Network.Socket.Types.PortNumber
  RecSel Left Main.Client
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLL),1*U(A,A,1*U(U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Client) ->
                 case ds of wild { Main.Client ds1 ds2 ds3 ds4 ds5 ds6 -> ds3 }) -}
e0b0f1023bafcee82a8dbaaf452c606e
  clientSendChan ::
    Main.Client -> Control.Concurrent.STM.TChan.TChan Main.Message
  RecSel Left Main.Client
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLS),1*U(A,A,A,A,A,1*U(U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Client) ->
                 case ds of wild { Main.Client ds1 ds2 ds3 ds4 ds5 ds6 -> ds6 }) -}
22b48b0d97bf1d59fbce87ec43e45623
  clients ::
    Main.Server
    -> GHC.Conc.Sync.TVar
         (Data.Map.Base.Map Main.ClientName Main.Client)
  RecSel Left Main.Server
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Server) ->
                 case ds of wild { Main.Server ds1 -> ds1 }) -}
335a58328e486cc6c9d6e5882b452a3c
  handleMessage ::
    Main.Server
    -> Main.Client -> Main.Message -> GHC.Types.IO GHC.Types.Bool
  {- Arity: 4,
     Strictness: <L,1*U(1*U(U))><S,1*U(U,1*U,A,U,A,A)><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.handleMessage1
                  `cast`
                (<Main.Server>_R
                 ->_R <Main.Client>_R
                 ->_R <Main.Message>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Bool>_R)) -}
54d1a8bfe9fd66333bdaead0399fd039
  handleMessage1 ::
    Main.Server
    -> Main.Client
    -> Main.Message
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 4,
     Strictness: <L,1*U(1*U(U))><S,1*U(U,1*U,A,U,A,A)><S,1*U><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Main.Server)
                   (w1 :: Main.Client)
                   (w2 :: Main.Message)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w1 of ww { Main.Client ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$whandleMessage w ww1 ww2 ww4 w2 w3 }) -}
fe2bbb203d35ceeb7f27c28778c531ba
  heloText ::
    Main.Server -> Main.Client -> Main.ClientName -> GHC.Types.IO ()
  {- Arity: 4,
     Strictness: <S(S(S)),1*U(1*U(U))><S,1*U(U,1*U,A,U,A,A)><S,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.heloText1
                  `cast`
                (<Main.Server>_R
                 ->_R <Main.Client>_R
                 ->_R <Main.ClientName>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
2b68ee43a464e00511ff0ed414a2c366
  heloText1 ::
    Main.Server
    -> Main.Client
    -> Main.ClientName
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <S(S(S)),1*U(1*U(U))><S,1*U(U,1*U,A,U,A,A)><S,U><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Main.Server)
                   (w1 :: Main.Client)
                   (w2 :: Main.ClientName)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { Main.Server ww1 ->
                 case ww1 of ww2 { GHC.Conc.Sync.TVar ww3 ->
                 case w1 of ww4 { Main.Client ww5 ww6 ww7 ww8 ww9 ww10 ->
                 Main.$wheloText ww3 ww5 ww6 ww8 w2 w3 } } }) -}
2ced903c959318bfdd5f2dc79bc0be47
  heloText2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# " is not connected."#) -}
e1444a3f6529cb3a1329e9d788504230
  heloText3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "\n\
                   \Port:\n\
                   \StudentID:13326255\n"#) -}
a0860a800a4ee82bffbb5f03281b66c3
  kick ::
    Main.Server
    -> Main.ClientName -> Main.ClientName -> GHC.Conc.Sync.STM ()
  {- Arity: 4, Strictness: <S(S(S)),1*U(1*U(U))><S,U><S,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.kick1
                  `cast`
                (<Main.Server>_R
                 ->_R <Main.ClientName>_R
                 ->_R <Main.ClientName>_R
                 ->_R Sym (GHC.Conc.Sync.N:STM[0] <()>_R)) -}
9f58d9724967404aa15442a04963cf46
  kick1 ::
    Main.Server
    -> Main.ClientName
    -> Main.ClientName
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <S(S(S)),1*U(1*U(U))><S,U><S,U><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Main.Server)
                   (w1 :: Main.ClientName)
                   (w2 :: Main.ClientName)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { Main.Server ww1 ->
                 case ww1 of ww2 { GHC.Conc.Sync.TVar ww3 ->
                 Main.$wkick ww3 w1 w2 w3 } }) -}
f325bc6a837e0d2930477f0c0b78b296
  kick2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# " is not connected"#) -}
d9c0dee8a685c5ed422401aaa63f23bf
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
01d62c2c484918d4b5d94b688c90c90e
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
129a1a814fa667791781f32a098e848d
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
a95a596c0995e9180c41844073558969
  newClient ::
    Main.ClientName
    -> GHC.Base.String
    -> Network.Socket.Types.PortNumber
    -> GHC.IO.Handle.Types.Handle
    -> GHC.Conc.Sync.STM Main.Client
  {- Arity: 5, HasNoCafRefs, Strictness: <L,U><L,U><L,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.newClient1
                  `cast`
                (<Main.ClientName>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <Network.Socket.Types.PortNumber>_R
                 ->_R <GHC.IO.Handle.Types.Handle>_R
                 ->_R Sym (GHC.Conc.Sync.N:STM[0] <Main.Client>_R)) -}
6fe171988e76a42bc680c8d351d5c5cb
  newClient1 ::
    Main.ClientName
    -> GHC.Base.String
    -> Network.Socket.Types.PortNumber
    -> GHC.IO.Handle.Types.Handle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.Client #)
  {- Arity: 5, HasNoCafRefs, Strictness: <L,U><L,U><L,U><L,U><S,U>,
     Unfolding: InlineRule (5, True, False)
                (\ (name :: Main.ClientName)
                   (host :: GHC.Base.String)
                   (port1 :: Network.Socket.Types.PortNumber)
                   (handle :: GHC.IO.Handle.Types.Handle)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newTVar#
                        @ (Control.Concurrent.STM.TChan.TList Main.Message)
                        @ GHC.Prim.RealWorld
                        (Control.Concurrent.STM.TChan.TNil @ Main.Message)
                        eta of ds { (#,#) ipv ipv1 ->
                 let {
                   hole :: GHC.Conc.Sync.TVar
                             (Control.Concurrent.STM.TChan.TList Main.Message)
                   = GHC.Conc.Sync.TVar
                       @ (Control.Concurrent.STM.TChan.TList Main.Message)
                       ipv1
                 } in
                 case GHC.Prim.newTVar#
                        @ (GHC.Conc.Sync.TVar
                             (Control.Concurrent.STM.TChan.TList Main.Message))
                        @ GHC.Prim.RealWorld
                        hole
                        ipv of ds1 { (#,#) ipv2 ipv3 ->
                 case GHC.Prim.newTVar#
                        @ (GHC.Conc.Sync.TVar
                             (Control.Concurrent.STM.TChan.TList Main.Message))
                        @ GHC.Prim.RealWorld
                        hole
                        ipv2 of ds2 { (#,#) ipv4 ipv5 ->
                 case GHC.Prim.newTVar#
                        @ (GHC.Base.Maybe GHC.Base.String)
                        @ GHC.Prim.RealWorld
                        (GHC.Base.Nothing @ GHC.Base.String)
                        ipv4 of ds4 { (#,#) ipv7 ipv8 ->
                 (# ipv7,
                    Main.Client
                      name
                      host
                      port1
                      handle
                      (GHC.Conc.Sync.TVar @ (GHC.Base.Maybe GHC.Base.String) ipv8)
                      (Control.Concurrent.STM.TChan.TChan
                         @ Main.Message
                         ipv3
                         ipv5) #) } } } }) -}
a76f44d97d545556fcfffe3148ac3947
  newServer :: GHC.Types.IO Main.Server
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.newServer1 `cast` (Sym (GHC.Types.N:IO[0] <Main.Server>_R)) -}
65fc86ebfd951cffb228850fc68d296b
  newServer1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.Server #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newTVar#
                        @ (Data.Map.Base.Map Main.ClientName Main.Client)
                        @ GHC.Prim.RealWorld
                        (Data.Map.Base.Tip @ Main.ClientName @ Main.Client)
                        s of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    Main.Server
                      (GHC.Conc.Sync.TVar
                         @ (Data.Map.Base.Map Main.ClientName Main.Client)
                         ipv1) #) }) -}
621803e5b2c72bb1075857e68071e8c8
  port :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 44444#) -}
d98d743707166ae6fed41abe5970743c
  removeClient :: Main.Server -> Main.ClientName -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <S(S(S)),1*U(U(U))><S,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.removeClient1
                  `cast`
                (<Main.Server>_R
                 ->_R <Main.ClientName>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
c12e985fc5b1b0db683b92dbf54cf003
  removeClient1 ::
    Main.Server
    -> Main.ClientName
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <S(S(S)),1*U(U(U))><S,U><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Main.Server)
                   (w1 :: Main.ClientName)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { Main.Server ww1 ->
                 case ww1 of ww2 { GHC.Conc.Sync.TVar ww3 ->
                 Main.$wremoveClient ww3 w1 w2 } }) -}
792e4ea41d4149ff1ecd5bfbe10f602c
  removeClient2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# " has disconnected"#) -}
e9b286ef8fcbe6c19f3f5d4249d8c6da
  runClient :: Main.Server -> Main.Client -> GHC.Types.IO ()
  {- Arity: 3,
     Strictness: <S,1*U(U(U))><S,1*U(U,U,A,U,U(U),U(U,U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.runClient1
                  `cast`
                (<Main.Server>_R
                 ->_R <Main.Client>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
d2250d78eaa8d59d090d199e5c40a9f6
  runClient1 ::
    Main.Server
    -> Main.Client
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3,
     Strictness: <S,1*U(U(U))><S,1*U(U,U,A,U,U(U),U(U,U))><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Main.Server)
                   (w1 :: Main.Client)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { Main.Server ww1 ->
                 case w1 of ww2 { Main.Client ww3 ww4 ww5 ww6 ww7 ww8 ->
                 Main.$wrunClient ww1 ww3 ww4 ww6 ww7 ww8 w2 } }) -}
32499324d48c0ac6835a5e39fb9e67af
  sendMessage :: Main.Client -> Main.Message -> GHC.Conc.Sync.STM ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLLLS(LS)),1*U(A,A,A,A,A,1*U(A,U))><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.sendMessage1
                  `cast`
                (<Main.Client>_R
                 ->_R <Main.Message>_R
                 ->_R Sym (GHC.Conc.Sync.N:STM[0] <()>_R)) -}
4e11eb6b0f5a5ffa1c6e77b4c04deae0
  sendMessage1 ::
    Main.Client
    -> Main.Message
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLLLS(LS)),1*U(A,A,A,A,A,1*U(A,U))><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: Main.Client)
                   (msg :: Main.Message)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds of wild { Main.Client ds1 ds2 ds3 ds4 ds5 ds6 ->
                 Control.Concurrent.STM.TChan.writeTChan1
                   @ Main.Message
                   ds6
                   msg
                   eta }) -}
f6085dc49568df6d8563852993c29378
  sendToName ::
    Main.Server
    -> Main.ClientName
    -> Main.Message
    -> GHC.Conc.Sync.STM GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S(S)),1*U(1*U(U))><S,1*U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.sendToName1
                  `cast`
                (<Main.Server>_R
                 ->_R <Main.ClientName>_R
                 ->_R <Main.Message>_R
                 ->_R Sym (GHC.Conc.Sync.N:STM[0] <GHC.Types.Bool>_R)) -}
55c343e1ae2df0bf7c70b605da710a14
  sendToName1 ::
    Main.Server
    -> Main.ClientName
    -> Main.Message
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S(S)),1*U(1*U(U))><S,1*U><L,U><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Main.Server)
                   (w1 :: Main.ClientName)
                   (w2 :: Main.Message)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { Main.Server ww1 ->
                 case ww1 of ww2 { GHC.Conc.Sync.TVar ww3 ->
                 Main.$wsendToName ww3 w1 w2 w3 } }) -}
ef45a7ee5255f1ae964bac2b964790b8
  talk ::
    GHC.Base.String
    -> Network.Socket.Types.PortNumber
    -> GHC.IO.Handle.Types.Handle
    -> Main.Server
    -> GHC.Types.IO ()
  {- Arity: 5, Strictness: <L,U><L,U><S,U><S,1*U(U(U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.talk1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <Network.Socket.Types.PortNumber>_R
                 ->_R <GHC.IO.Handle.Types.Handle>_R
                 ->_R <Main.Server>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
e438c0a9ca7efb42111ebb6ac4f28a6d
  talk1 ::
    GHC.Base.String
    -> Network.Socket.Types.PortNumber
    -> GHC.IO.Handle.Types.Handle
    -> Main.Server
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5, Strictness: <L,U><L,U><S,U><S,1*U(U(U))><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ (w :: GHC.Base.String)
                   (w1 :: Network.Socket.Types.PortNumber)
                   (w2 :: GHC.IO.Handle.Types.Handle)
                   (w3 :: Main.Server)
                   (w4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w3 of ww { Main.Server ww1 -> Main.$wtalk w w1 w2 ww1 w4 }) -}
8b2c46c96892508e3337a8f4cbf9b104
  tell ::
    Main.Server
    -> Main.Client
    -> Main.ClientName
    -> GHC.Base.String
    -> GHC.Types.IO ()
  {- Arity: 5,
     Strictness: <S(S(S)),1*U(1*U(U))><S,1*U(U,A,A,U,A,A)><S,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tell1
                  `cast`
                (<Main.Server>_R
                 ->_R <Main.Client>_R
                 ->_R <Main.ClientName>_R
                 ->_R <GHC.Base.String>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
2d938c9c818bef8decd883d09a68a31a
  tell1 ::
    Main.Server
    -> Main.Client
    -> Main.ClientName
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <S(S(S)),1*U(1*U(U))><S,1*U(U,A,A,U,A,A)><S,U><L,U><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ (w :: Main.Server)
                   (w1 :: Main.Client)
                   (w2 :: Main.ClientName)
                   (w3 :: GHC.Base.String)
                   (w4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { Main.Server ww1 ->
                 case ww1 of ww2 { GHC.Conc.Sync.TVar ww3 ->
                 case w1 of ww4 { Main.Client ww5 ww6 ww7 ww8 ww9 ww10 ->
                 Main.$wtell ww3 ww5 ww8 w2 w3 w4 } } }) -}
"SPEC/Main $fPrintfArg[]_$cparseFormat @ Char" [ALWAYS] forall ($dIsChar :: Text.Printf.IsChar
                                                                              GHC.Types.Char)
  Text.Printf.$fPrintfArg[]_$cparseFormat @ GHC.Types.Char $dIsChar
  = Main.$s$fPrintfArg[]_$s$fPrintfArg[]_$cparseFormat
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

